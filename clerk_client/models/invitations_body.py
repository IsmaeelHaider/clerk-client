# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvitationsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'public_metadata': 'object',
        'redirect_url': 'str',
        'notify': 'bool',
        'ignore_existing': 'bool'
    }

    attribute_map = {
        'email_address': 'email_address',
        'public_metadata': 'public_metadata',
        'redirect_url': 'redirect_url',
        'notify': 'notify',
        'ignore_existing': 'ignore_existing'
    }

    def __init__(self, email_address=None, public_metadata=None, redirect_url=None, notify=True, ignore_existing=False):  # noqa: E501
        """InvitationsBody - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._public_metadata = None
        self._redirect_url = None
        self._notify = None
        self._ignore_existing = None
        self.discriminator = None
        self.email_address = email_address
        if public_metadata is not None:
            self.public_metadata = public_metadata
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if notify is not None:
            self.notify = notify
        if ignore_existing is not None:
            self.ignore_existing = ignore_existing

    @property
    def email_address(self):
        """Gets the email_address of this InvitationsBody.  # noqa: E501

        The email address the invitation will be sent to  # noqa: E501

        :return: The email_address of this InvitationsBody.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this InvitationsBody.

        The email address the invitation will be sent to  # noqa: E501

        :param email_address: The email_address of this InvitationsBody.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def public_metadata(self):
        """Gets the public_metadata of this InvitationsBody.  # noqa: E501

        Metadata that will be attached to the newly created invitation. The value of this property should be a well-formed JSON object. Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.  # noqa: E501

        :return: The public_metadata of this InvitationsBody.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this InvitationsBody.

        Metadata that will be attached to the newly created invitation. The value of this property should be a well-formed JSON object. Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.  # noqa: E501

        :param public_metadata: The public_metadata of this InvitationsBody.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def redirect_url(self):
        """Gets the redirect_url of this InvitationsBody.  # noqa: E501

        Optional URL which specifies where to redirect the user once they click the invitation link. This is only required if you have implemented a [custom flow](https://clerk.com/docs/authentication/invitations#custom-flow) and you're not using Clerk Hosted Pages or Clerk Components.  # noqa: E501

        :return: The redirect_url of this InvitationsBody.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this InvitationsBody.

        Optional URL which specifies where to redirect the user once they click the invitation link. This is only required if you have implemented a [custom flow](https://clerk.com/docs/authentication/invitations#custom-flow) and you're not using Clerk Hosted Pages or Clerk Components.  # noqa: E501

        :param redirect_url: The redirect_url of this InvitationsBody.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def notify(self):
        """Gets the notify of this InvitationsBody.  # noqa: E501

        Optional flag which denotes whether an email invitation should be sent to the given email address. Defaults to true.  # noqa: E501

        :return: The notify of this InvitationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this InvitationsBody.

        Optional flag which denotes whether an email invitation should be sent to the given email address. Defaults to true.  # noqa: E501

        :param notify: The notify of this InvitationsBody.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def ignore_existing(self):
        """Gets the ignore_existing of this InvitationsBody.  # noqa: E501

        Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.  # noqa: E501

        :return: The ignore_existing of this InvitationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_existing

    @ignore_existing.setter
    def ignore_existing(self, ignore_existing):
        """Sets the ignore_existing of this InvitationsBody.

        Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.  # noqa: E501

        :param ignore_existing: The ignore_existing of this InvitationsBody.  # noqa: E501
        :type: bool
        """

        self._ignore_existing = ignore_existing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
