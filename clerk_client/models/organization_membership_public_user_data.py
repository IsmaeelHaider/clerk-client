# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationMembershipPublicUserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'profile_image_url': 'str',
        'image_url': 'str',
        'has_image': 'bool',
        'identifier': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'profile_image_url': 'profile_image_url',
        'image_url': 'image_url',
        'has_image': 'has_image',
        'identifier': 'identifier'
    }

    def __init__(self, user_id=None, first_name=None, last_name=None, profile_image_url=None, image_url=None, has_image=None, identifier=None):  # noqa: E501
        """OrganizationMembershipPublicUserData - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._profile_image_url = None
        self._image_url = None
        self._has_image = None
        self._identifier = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url
        if image_url is not None:
            self.image_url = image_url
        if has_image is not None:
            self.has_image = has_image
        if identifier is not None:
            self.identifier = identifier

    @property
    def user_id(self):
        """Gets the user_id of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The user_id of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrganizationMembershipPublicUserData.


        :param user_id: The user_id of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The first_name of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrganizationMembershipPublicUserData.


        :param first_name: The first_name of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The last_name of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrganizationMembershipPublicUserData.


        :param last_name: The last_name of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The profile_image_url of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this OrganizationMembershipPublicUserData.


        :param profile_image_url: The profile_image_url of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def image_url(self):
        """Gets the image_url of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The image_url of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this OrganizationMembershipPublicUserData.


        :param image_url: The image_url of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def has_image(self):
        """Gets the has_image of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The has_image of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: bool
        """
        return self._has_image

    @has_image.setter
    def has_image(self, has_image):
        """Sets the has_image of this OrganizationMembershipPublicUserData.


        :param has_image: The has_image of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: bool
        """

        self._has_image = has_image

    @property
    def identifier(self):
        """Gets the identifier of this OrganizationMembershipPublicUserData.  # noqa: E501


        :return: The identifier of this OrganizationMembershipPublicUserData.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this OrganizationMembershipPublicUserData.


        :param identifier: The identifier of this OrganizationMembershipPublicUserData.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationMembershipPublicUserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationMembershipPublicUserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
