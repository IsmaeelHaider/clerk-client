# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SamlConnectionsSamlConnectionIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'domain': 'str',
        'idp_entity_id': 'str',
        'idp_sso_url': 'str',
        'idp_certificate': 'str',
        'idp_metadata_url': 'str',
        'attribute_mapping': 'SamlConnectionssamlConnectionIdAttributeMapping',
        'active': 'bool',
        'sync_user_attributes': 'bool',
        'allow_subdomains': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'domain': 'domain',
        'idp_entity_id': 'idp_entity_id',
        'idp_sso_url': 'idp_sso_url',
        'idp_certificate': 'idp_certificate',
        'idp_metadata_url': 'idp_metadata_url',
        'attribute_mapping': 'attribute_mapping',
        'active': 'active',
        'sync_user_attributes': 'sync_user_attributes',
        'allow_subdomains': 'allow_subdomains'
    }

    def __init__(self, name=None, domain=None, idp_entity_id=None, idp_sso_url=None, idp_certificate=None, idp_metadata_url=None, attribute_mapping=None, active=None, sync_user_attributes=None, allow_subdomains=None):  # noqa: E501
        """SamlConnectionsSamlConnectionIdBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._domain = None
        self._idp_entity_id = None
        self._idp_sso_url = None
        self._idp_certificate = None
        self._idp_metadata_url = None
        self._attribute_mapping = None
        self._active = None
        self._sync_user_attributes = None
        self._allow_subdomains = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if domain is not None:
            self.domain = domain
        if idp_entity_id is not None:
            self.idp_entity_id = idp_entity_id
        if idp_sso_url is not None:
            self.idp_sso_url = idp_sso_url
        if idp_certificate is not None:
            self.idp_certificate = idp_certificate
        if idp_metadata_url is not None:
            self.idp_metadata_url = idp_metadata_url
        if attribute_mapping is not None:
            self.attribute_mapping = attribute_mapping
        if active is not None:
            self.active = active
        if sync_user_attributes is not None:
            self.sync_user_attributes = sync_user_attributes
        if allow_subdomains is not None:
            self.allow_subdomains = allow_subdomains

    @property
    def name(self):
        """Gets the name of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        The name of the new SAML Connection  # noqa: E501

        :return: The name of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SamlConnectionsSamlConnectionIdBody.

        The name of the new SAML Connection  # noqa: E501

        :param name: The name of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def domain(self):
        """Gets the domain of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        The domain to use for the new SAML Connection  # noqa: E501

        :return: The domain of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SamlConnectionsSamlConnectionIdBody.

        The domain to use for the new SAML Connection  # noqa: E501

        :param domain: The domain of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def idp_entity_id(self):
        """Gets the idp_entity_id of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        The entity id as provided by the IdP  # noqa: E501

        :return: The idp_entity_id of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_entity_id

    @idp_entity_id.setter
    def idp_entity_id(self, idp_entity_id):
        """Sets the idp_entity_id of this SamlConnectionsSamlConnectionIdBody.

        The entity id as provided by the IdP  # noqa: E501

        :param idp_entity_id: The idp_entity_id of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: str
        """

        self._idp_entity_id = idp_entity_id

    @property
    def idp_sso_url(self):
        """Gets the idp_sso_url of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        The SSO url as provided by the IdP  # noqa: E501

        :return: The idp_sso_url of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_sso_url

    @idp_sso_url.setter
    def idp_sso_url(self, idp_sso_url):
        """Sets the idp_sso_url of this SamlConnectionsSamlConnectionIdBody.

        The SSO url as provided by the IdP  # noqa: E501

        :param idp_sso_url: The idp_sso_url of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: str
        """

        self._idp_sso_url = idp_sso_url

    @property
    def idp_certificate(self):
        """Gets the idp_certificate of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        The x509 certificated as provided by the IdP  # noqa: E501

        :return: The idp_certificate of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_certificate

    @idp_certificate.setter
    def idp_certificate(self, idp_certificate):
        """Sets the idp_certificate of this SamlConnectionsSamlConnectionIdBody.

        The x509 certificated as provided by the IdP  # noqa: E501

        :param idp_certificate: The idp_certificate of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: str
        """

        self._idp_certificate = idp_certificate

    @property
    def idp_metadata_url(self):
        """Gets the idp_metadata_url of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them  # noqa: E501

        :return: The idp_metadata_url of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_metadata_url

    @idp_metadata_url.setter
    def idp_metadata_url(self, idp_metadata_url):
        """Sets the idp_metadata_url of this SamlConnectionsSamlConnectionIdBody.

        The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them  # noqa: E501

        :param idp_metadata_url: The idp_metadata_url of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: str
        """

        self._idp_metadata_url = idp_metadata_url

    @property
    def attribute_mapping(self):
        """Gets the attribute_mapping of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501


        :return: The attribute_mapping of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: SamlConnectionssamlConnectionIdAttributeMapping
        """
        return self._attribute_mapping

    @attribute_mapping.setter
    def attribute_mapping(self, attribute_mapping):
        """Sets the attribute_mapping of this SamlConnectionsSamlConnectionIdBody.


        :param attribute_mapping: The attribute_mapping of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: SamlConnectionssamlConnectionIdAttributeMapping
        """

        self._attribute_mapping = attribute_mapping

    @property
    def active(self):
        """Gets the active of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        Activate or de-activate the SAML Connection  # noqa: E501

        :return: The active of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SamlConnectionsSamlConnectionIdBody.

        Activate or de-activate the SAML Connection  # noqa: E501

        :param active: The active of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def sync_user_attributes(self):
        """Gets the sync_user_attributes of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        Controls whether to update the user's attributes in each sign-in  # noqa: E501

        :return: The sync_user_attributes of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._sync_user_attributes

    @sync_user_attributes.setter
    def sync_user_attributes(self, sync_user_attributes):
        """Sets the sync_user_attributes of this SamlConnectionsSamlConnectionIdBody.

        Controls whether to update the user's attributes in each sign-in  # noqa: E501

        :param sync_user_attributes: The sync_user_attributes of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: bool
        """

        self._sync_user_attributes = sync_user_attributes

    @property
    def allow_subdomains(self):
        """Gets the allow_subdomains of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501

        Allow users with an email address subdomain to use this connection in order to authenticate  # noqa: E501

        :return: The allow_subdomains of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_subdomains

    @allow_subdomains.setter
    def allow_subdomains(self, allow_subdomains):
        """Sets the allow_subdomains of this SamlConnectionsSamlConnectionIdBody.

        Allow users with an email address subdomain to use this connection in order to authenticate  # noqa: E501

        :param allow_subdomains: The allow_subdomains of this SamlConnectionsSamlConnectionIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_subdomains = allow_subdomains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamlConnectionsSamlConnectionIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlConnectionsSamlConnectionIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
