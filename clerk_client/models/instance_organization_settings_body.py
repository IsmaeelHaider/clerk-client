# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceOrganizationSettingsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'max_allowed_memberships': 'int',
        'admin_delete_enabled': 'bool',
        'domains_enabled': 'bool',
        'domains_enrollment_modes': 'list[str]',
        'creator_role_id': 'str',
        'domains_default_role_id': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'max_allowed_memberships': 'max_allowed_memberships',
        'admin_delete_enabled': 'admin_delete_enabled',
        'domains_enabled': 'domains_enabled',
        'domains_enrollment_modes': 'domains_enrollment_modes',
        'creator_role_id': 'creator_role_id',
        'domains_default_role_id': 'domains_default_role_id'
    }

    def __init__(self, enabled=None, max_allowed_memberships=None, admin_delete_enabled=None, domains_enabled=None, domains_enrollment_modes=None, creator_role_id=None, domains_default_role_id=None):  # noqa: E501
        """InstanceOrganizationSettingsBody - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._max_allowed_memberships = None
        self._admin_delete_enabled = None
        self._domains_enabled = None
        self._domains_enrollment_modes = None
        self._creator_role_id = None
        self._domains_default_role_id = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if max_allowed_memberships is not None:
            self.max_allowed_memberships = max_allowed_memberships
        if admin_delete_enabled is not None:
            self.admin_delete_enabled = admin_delete_enabled
        if domains_enabled is not None:
            self.domains_enabled = domains_enabled
        if domains_enrollment_modes is not None:
            self.domains_enrollment_modes = domains_enrollment_modes
        if creator_role_id is not None:
            self.creator_role_id = creator_role_id
        if domains_default_role_id is not None:
            self.domains_default_role_id = domains_default_role_id

    @property
    def enabled(self):
        """Gets the enabled of this InstanceOrganizationSettingsBody.  # noqa: E501


        :return: The enabled of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InstanceOrganizationSettingsBody.


        :param enabled: The enabled of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def max_allowed_memberships(self):
        """Gets the max_allowed_memberships of this InstanceOrganizationSettingsBody.  # noqa: E501


        :return: The max_allowed_memberships of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: int
        """
        return self._max_allowed_memberships

    @max_allowed_memberships.setter
    def max_allowed_memberships(self, max_allowed_memberships):
        """Sets the max_allowed_memberships of this InstanceOrganizationSettingsBody.


        :param max_allowed_memberships: The max_allowed_memberships of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: int
        """

        self._max_allowed_memberships = max_allowed_memberships

    @property
    def admin_delete_enabled(self):
        """Gets the admin_delete_enabled of this InstanceOrganizationSettingsBody.  # noqa: E501


        :return: The admin_delete_enabled of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._admin_delete_enabled

    @admin_delete_enabled.setter
    def admin_delete_enabled(self, admin_delete_enabled):
        """Sets the admin_delete_enabled of this InstanceOrganizationSettingsBody.


        :param admin_delete_enabled: The admin_delete_enabled of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: bool
        """

        self._admin_delete_enabled = admin_delete_enabled

    @property
    def domains_enabled(self):
        """Gets the domains_enabled of this InstanceOrganizationSettingsBody.  # noqa: E501


        :return: The domains_enabled of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._domains_enabled

    @domains_enabled.setter
    def domains_enabled(self, domains_enabled):
        """Sets the domains_enabled of this InstanceOrganizationSettingsBody.


        :param domains_enabled: The domains_enabled of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: bool
        """

        self._domains_enabled = domains_enabled

    @property
    def domains_enrollment_modes(self):
        """Gets the domains_enrollment_modes of this InstanceOrganizationSettingsBody.  # noqa: E501

        Specify which enrollment modes to enable for your Organization Domains. Supported modes are 'automatic_invitation' & 'automatic_suggestion'.  # noqa: E501

        :return: The domains_enrollment_modes of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains_enrollment_modes

    @domains_enrollment_modes.setter
    def domains_enrollment_modes(self, domains_enrollment_modes):
        """Sets the domains_enrollment_modes of this InstanceOrganizationSettingsBody.

        Specify which enrollment modes to enable for your Organization Domains. Supported modes are 'automatic_invitation' & 'automatic_suggestion'.  # noqa: E501

        :param domains_enrollment_modes: The domains_enrollment_modes of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: list[str]
        """

        self._domains_enrollment_modes = domains_enrollment_modes

    @property
    def creator_role_id(self):
        """Gets the creator_role_id of this InstanceOrganizationSettingsBody.  # noqa: E501

        Specify what the default organization role is for an organization creator.  # noqa: E501

        :return: The creator_role_id of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._creator_role_id

    @creator_role_id.setter
    def creator_role_id(self, creator_role_id):
        """Sets the creator_role_id of this InstanceOrganizationSettingsBody.

        Specify what the default organization role is for an organization creator.  # noqa: E501

        :param creator_role_id: The creator_role_id of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: str
        """

        self._creator_role_id = creator_role_id

    @property
    def domains_default_role_id(self):
        """Gets the domains_default_role_id of this InstanceOrganizationSettingsBody.  # noqa: E501

        Specify what the default organization role is for the organization domains.  # noqa: E501

        :return: The domains_default_role_id of this InstanceOrganizationSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._domains_default_role_id

    @domains_default_role_id.setter
    def domains_default_role_id(self, domains_default_role_id):
        """Sets the domains_default_role_id of this InstanceOrganizationSettingsBody.

        Specify what the default organization role is for the organization domains.  # noqa: E501

        :param domains_default_role_id: The domains_default_role_id of this InstanceOrganizationSettingsBody.  # noqa: E501
        :type: str
        """

        self._domains_default_role_id = domains_default_role_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceOrganizationSettingsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceOrganizationSettingsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
