# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'user_id': 'str',
        'client_id': 'str',
        'actor': 'object',
        'status': 'str',
        'last_active_organization_id': 'str',
        'last_active_at': 'int',
        'expire_at': 'int',
        'abandon_at': 'int',
        'updated_at': 'int',
        'created_at': 'int'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'user_id': 'user_id',
        'client_id': 'client_id',
        'actor': 'actor',
        'status': 'status',
        'last_active_organization_id': 'last_active_organization_id',
        'last_active_at': 'last_active_at',
        'expire_at': 'expire_at',
        'abandon_at': 'abandon_at',
        'updated_at': 'updated_at',
        'created_at': 'created_at'
    }

    def __init__(self, object=None, id=None, user_id=None, client_id=None, actor=None, status=None, last_active_organization_id=None, last_active_at=None, expire_at=None, abandon_at=None, updated_at=None, created_at=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._user_id = None
        self._client_id = None
        self._actor = None
        self._status = None
        self._last_active_organization_id = None
        self._last_active_at = None
        self._expire_at = None
        self._abandon_at = None
        self._updated_at = None
        self._created_at = None
        self.discriminator = None
        self.object = object
        self.id = id
        self.user_id = user_id
        self.client_id = client_id
        if actor is not None:
            self.actor = actor
        self.status = status
        if last_active_organization_id is not None:
            self.last_active_organization_id = last_active_organization_id
        self.last_active_at = last_active_at
        self.expire_at = expire_at
        self.abandon_at = abandon_at
        self.updated_at = updated_at
        self.created_at = created_at

    @property
    def object(self):
        """Gets the object of this Session.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this Session.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Session.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this Session.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["session"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def id(self):
        """Gets the id of this Session.  # noqa: E501


        :return: The id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.


        :param id: The id of this Session.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Session.  # noqa: E501


        :return: The user_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Session.


        :param user_id: The user_id of this Session.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def client_id(self):
        """Gets the client_id of this Session.  # noqa: E501


        :return: The client_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Session.


        :param client_id: The client_id of this Session.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def actor(self):
        """Gets the actor of this Session.  # noqa: E501


        :return: The actor of this Session.  # noqa: E501
        :rtype: object
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Session.


        :param actor: The actor of this Session.  # noqa: E501
        :type: object
        """

        self._actor = actor

    @property
    def status(self):
        """Gets the status of this Session.  # noqa: E501


        :return: The status of this Session.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Session.


        :param status: The status of this Session.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "revoked", "ended", "expired", "removed", "abandoned", "replaced"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_active_organization_id(self):
        """Gets the last_active_organization_id of this Session.  # noqa: E501


        :return: The last_active_organization_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._last_active_organization_id

    @last_active_organization_id.setter
    def last_active_organization_id(self, last_active_organization_id):
        """Sets the last_active_organization_id of this Session.


        :param last_active_organization_id: The last_active_organization_id of this Session.  # noqa: E501
        :type: str
        """

        self._last_active_organization_id = last_active_organization_id

    @property
    def last_active_at(self):
        """Gets the last_active_at of this Session.  # noqa: E501


        :return: The last_active_at of this Session.  # noqa: E501
        :rtype: int
        """
        return self._last_active_at

    @last_active_at.setter
    def last_active_at(self, last_active_at):
        """Sets the last_active_at of this Session.


        :param last_active_at: The last_active_at of this Session.  # noqa: E501
        :type: int
        """
        if last_active_at is None:
            raise ValueError("Invalid value for `last_active_at`, must not be `None`")  # noqa: E501

        self._last_active_at = last_active_at

    @property
    def expire_at(self):
        """Gets the expire_at of this Session.  # noqa: E501


        :return: The expire_at of this Session.  # noqa: E501
        :rtype: int
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Session.


        :param expire_at: The expire_at of this Session.  # noqa: E501
        :type: int
        """
        if expire_at is None:
            raise ValueError("Invalid value for `expire_at`, must not be `None`")  # noqa: E501

        self._expire_at = expire_at

    @property
    def abandon_at(self):
        """Gets the abandon_at of this Session.  # noqa: E501


        :return: The abandon_at of this Session.  # noqa: E501
        :rtype: int
        """
        return self._abandon_at

    @abandon_at.setter
    def abandon_at(self, abandon_at):
        """Sets the abandon_at of this Session.


        :param abandon_at: The abandon_at of this Session.  # noqa: E501
        :type: int
        """
        if abandon_at is None:
            raise ValueError("Invalid value for `abandon_at`, must not be `None`")  # noqa: E501

        self._abandon_at = abandon_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Session.  # noqa: E501

        Unix timestamp of last update.   # noqa: E501

        :return: The updated_at of this Session.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Session.

        Unix timestamp of last update.   # noqa: E501

        :param updated_at: The updated_at of this Session.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Session.  # noqa: E501

        Unix timestamp of creation.   # noqa: E501

        :return: The created_at of this Session.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Session.

        Unix timestamp of creation.   # noqa: E501

        :param created_at: The created_at of this Session.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
