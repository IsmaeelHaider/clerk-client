# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'name': 'str',
        'slug': 'str',
        'members_count': 'int',
        'max_allowed_memberships': 'int',
        'admin_delete_enabled': 'bool',
        'public_metadata': 'object',
        'private_metadata': 'object',
        'created_by': 'str',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'name': 'name',
        'slug': 'slug',
        'members_count': 'members_count',
        'max_allowed_memberships': 'max_allowed_memberships',
        'admin_delete_enabled': 'admin_delete_enabled',
        'public_metadata': 'public_metadata',
        'private_metadata': 'private_metadata',
        'created_by': 'created_by',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, object=None, id=None, name=None, slug=None, members_count=None, max_allowed_memberships=None, admin_delete_enabled=None, public_metadata=None, private_metadata=None, created_by=None, created_at=None, updated_at=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._name = None
        self._slug = None
        self._members_count = None
        self._max_allowed_memberships = None
        self._admin_delete_enabled = None
        self._public_metadata = None
        self._private_metadata = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.object = object
        self.id = id
        self.name = name
        self.slug = slug
        if members_count is not None:
            self.members_count = members_count
        self.max_allowed_memberships = max_allowed_memberships
        if admin_delete_enabled is not None:
            self.admin_delete_enabled = admin_delete_enabled
        self.public_metadata = public_metadata
        self.private_metadata = private_metadata
        if created_by is not None:
            self.created_by = created_by
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def object(self):
        """Gets the object of this Organization.  # noqa: E501


        :return: The object of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Organization.


        :param object: The object of this Organization.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["organization"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Organization.  # noqa: E501


        :return: The slug of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Organization.


        :param slug: The slug of this Organization.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def members_count(self):
        """Gets the members_count of this Organization.  # noqa: E501


        :return: The members_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this Organization.


        :param members_count: The members_count of this Organization.  # noqa: E501
        :type: int
        """

        self._members_count = members_count

    @property
    def max_allowed_memberships(self):
        """Gets the max_allowed_memberships of this Organization.  # noqa: E501


        :return: The max_allowed_memberships of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._max_allowed_memberships

    @max_allowed_memberships.setter
    def max_allowed_memberships(self, max_allowed_memberships):
        """Sets the max_allowed_memberships of this Organization.


        :param max_allowed_memberships: The max_allowed_memberships of this Organization.  # noqa: E501
        :type: int
        """
        if max_allowed_memberships is None:
            raise ValueError("Invalid value for `max_allowed_memberships`, must not be `None`")  # noqa: E501

        self._max_allowed_memberships = max_allowed_memberships

    @property
    def admin_delete_enabled(self):
        """Gets the admin_delete_enabled of this Organization.  # noqa: E501


        :return: The admin_delete_enabled of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._admin_delete_enabled

    @admin_delete_enabled.setter
    def admin_delete_enabled(self, admin_delete_enabled):
        """Sets the admin_delete_enabled of this Organization.


        :param admin_delete_enabled: The admin_delete_enabled of this Organization.  # noqa: E501
        :type: bool
        """

        self._admin_delete_enabled = admin_delete_enabled

    @property
    def public_metadata(self):
        """Gets the public_metadata of this Organization.  # noqa: E501


        :return: The public_metadata of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this Organization.


        :param public_metadata: The public_metadata of this Organization.  # noqa: E501
        :type: object
        """
        if public_metadata is None:
            raise ValueError("Invalid value for `public_metadata`, must not be `None`")  # noqa: E501

        self._public_metadata = public_metadata

    @property
    def private_metadata(self):
        """Gets the private_metadata of this Organization.  # noqa: E501


        :return: The private_metadata of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._private_metadata

    @private_metadata.setter
    def private_metadata(self, private_metadata):
        """Sets the private_metadata of this Organization.


        :param private_metadata: The private_metadata of this Organization.  # noqa: E501
        :type: object
        """
        if private_metadata is None:
            raise ValueError("Invalid value for `private_metadata`, must not be `None`")  # noqa: E501

        self._private_metadata = private_metadata

    @property
    def created_by(self):
        """Gets the created_by of this Organization.  # noqa: E501


        :return: The created_by of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Organization.


        :param created_by: The created_by of this Organization.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this Organization.  # noqa: E501

        Unix timestamp of creation.   # noqa: E501

        :return: The created_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Organization.

        Unix timestamp of creation.   # noqa: E501

        :param created_at: The created_at of this Organization.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Organization.  # noqa: E501

        Unix timestamp of last update.   # noqa: E501

        :return: The updated_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Organization.

        Unix timestamp of last update.   # noqa: E501

        :param updated_at: The updated_at of this Organization.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
