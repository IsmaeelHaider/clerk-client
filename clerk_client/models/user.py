# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'external_id': 'str',
        'primary_email_address_id': 'str',
        'primary_phone_number_id': 'str',
        'primary_web3_wallet_id': 'str',
        'username': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'profile_image_url': 'str',
        'image_url': 'str',
        'has_image': 'bool',
        'public_metadata': 'object',
        'private_metadata': 'object',
        'unsafe_metadata': 'object',
        'email_addresses': 'list[EmailAddress]',
        'phone_numbers': 'list[PhoneNumber]',
        'web3_wallets': 'list[Web3Wallet]',
        'password_enabled': 'bool',
        'two_factor_enabled': 'bool',
        'totp_enabled': 'bool',
        'backup_code_enabled': 'bool',
        'external_accounts': 'list[object]',
        'saml_accounts': 'list[SAMLAccount]',
        'last_sign_in_at': 'int',
        'banned': 'bool',
        'locked': 'bool',
        'lockout_expires_in_seconds': 'int',
        'verification_attempts_remaining': 'int',
        'updated_at': 'int',
        'created_at': 'int',
        'delete_self_enabled': 'bool',
        'create_organization_enabled': 'bool',
        'last_active_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'external_id': 'external_id',
        'primary_email_address_id': 'primary_email_address_id',
        'primary_phone_number_id': 'primary_phone_number_id',
        'primary_web3_wallet_id': 'primary_web3_wallet_id',
        'username': 'username',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'profile_image_url': 'profile_image_url',
        'image_url': 'image_url',
        'has_image': 'has_image',
        'public_metadata': 'public_metadata',
        'private_metadata': 'private_metadata',
        'unsafe_metadata': 'unsafe_metadata',
        'email_addresses': 'email_addresses',
        'phone_numbers': 'phone_numbers',
        'web3_wallets': 'web3_wallets',
        'password_enabled': 'password_enabled',
        'two_factor_enabled': 'two_factor_enabled',
        'totp_enabled': 'totp_enabled',
        'backup_code_enabled': 'backup_code_enabled',
        'external_accounts': 'external_accounts',
        'saml_accounts': 'saml_accounts',
        'last_sign_in_at': 'last_sign_in_at',
        'banned': 'banned',
        'locked': 'locked',
        'lockout_expires_in_seconds': 'lockout_expires_in_seconds',
        'verification_attempts_remaining': 'verification_attempts_remaining',
        'updated_at': 'updated_at',
        'created_at': 'created_at',
        'delete_self_enabled': 'delete_self_enabled',
        'create_organization_enabled': 'create_organization_enabled',
        'last_active_at': 'last_active_at'
    }

    def __init__(self, id=None, object=None, external_id=None, primary_email_address_id=None, primary_phone_number_id=None, primary_web3_wallet_id=None, username=None, first_name=None, last_name=None, profile_image_url=None, image_url=None, has_image=None, public_metadata=None, private_metadata=None, unsafe_metadata=None, email_addresses=None, phone_numbers=None, web3_wallets=None, password_enabled=None, two_factor_enabled=None, totp_enabled=None, backup_code_enabled=None, external_accounts=None, saml_accounts=None, last_sign_in_at=None, banned=None, locked=None, lockout_expires_in_seconds=None, verification_attempts_remaining=None, updated_at=None, created_at=None, delete_self_enabled=None, create_organization_enabled=None, last_active_at=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._external_id = None
        self._primary_email_address_id = None
        self._primary_phone_number_id = None
        self._primary_web3_wallet_id = None
        self._username = None
        self._first_name = None
        self._last_name = None
        self._profile_image_url = None
        self._image_url = None
        self._has_image = None
        self._public_metadata = None
        self._private_metadata = None
        self._unsafe_metadata = None
        self._email_addresses = None
        self._phone_numbers = None
        self._web3_wallets = None
        self._password_enabled = None
        self._two_factor_enabled = None
        self._totp_enabled = None
        self._backup_code_enabled = None
        self._external_accounts = None
        self._saml_accounts = None
        self._last_sign_in_at = None
        self._banned = None
        self._locked = None
        self._lockout_expires_in_seconds = None
        self._verification_attempts_remaining = None
        self._updated_at = None
        self._created_at = None
        self._delete_self_enabled = None
        self._create_organization_enabled = None
        self._last_active_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if object is not None:
            self.object = object
        if external_id is not None:
            self.external_id = external_id
        if primary_email_address_id is not None:
            self.primary_email_address_id = primary_email_address_id
        if primary_phone_number_id is not None:
            self.primary_phone_number_id = primary_phone_number_id
        if primary_web3_wallet_id is not None:
            self.primary_web3_wallet_id = primary_web3_wallet_id
        if username is not None:
            self.username = username
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url
        if image_url is not None:
            self.image_url = image_url
        if has_image is not None:
            self.has_image = has_image
        if public_metadata is not None:
            self.public_metadata = public_metadata
        if private_metadata is not None:
            self.private_metadata = private_metadata
        if unsafe_metadata is not None:
            self.unsafe_metadata = unsafe_metadata
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if web3_wallets is not None:
            self.web3_wallets = web3_wallets
        if password_enabled is not None:
            self.password_enabled = password_enabled
        if two_factor_enabled is not None:
            self.two_factor_enabled = two_factor_enabled
        if totp_enabled is not None:
            self.totp_enabled = totp_enabled
        if backup_code_enabled is not None:
            self.backup_code_enabled = backup_code_enabled
        if external_accounts is not None:
            self.external_accounts = external_accounts
        if saml_accounts is not None:
            self.saml_accounts = saml_accounts
        if last_sign_in_at is not None:
            self.last_sign_in_at = last_sign_in_at
        if banned is not None:
            self.banned = banned
        if locked is not None:
            self.locked = locked
        if lockout_expires_in_seconds is not None:
            self.lockout_expires_in_seconds = lockout_expires_in_seconds
        if verification_attempts_remaining is not None:
            self.verification_attempts_remaining = verification_attempts_remaining
        if updated_at is not None:
            self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at
        if delete_self_enabled is not None:
            self.delete_self_enabled = delete_self_enabled
        if create_organization_enabled is not None:
            self.create_organization_enabled = create_organization_enabled
        if last_active_at is not None:
            self.last_active_at = last_active_at

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """Gets the object of this User.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this User.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this User.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["user"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def external_id(self):
        """Gets the external_id of this User.  # noqa: E501


        :return: The external_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.


        :param external_id: The external_id of this User.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def primary_email_address_id(self):
        """Gets the primary_email_address_id of this User.  # noqa: E501


        :return: The primary_email_address_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._primary_email_address_id

    @primary_email_address_id.setter
    def primary_email_address_id(self, primary_email_address_id):
        """Sets the primary_email_address_id of this User.


        :param primary_email_address_id: The primary_email_address_id of this User.  # noqa: E501
        :type: str
        """

        self._primary_email_address_id = primary_email_address_id

    @property
    def primary_phone_number_id(self):
        """Gets the primary_phone_number_id of this User.  # noqa: E501


        :return: The primary_phone_number_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._primary_phone_number_id

    @primary_phone_number_id.setter
    def primary_phone_number_id(self, primary_phone_number_id):
        """Sets the primary_phone_number_id of this User.


        :param primary_phone_number_id: The primary_phone_number_id of this User.  # noqa: E501
        :type: str
        """

        self._primary_phone_number_id = primary_phone_number_id

    @property
    def primary_web3_wallet_id(self):
        """Gets the primary_web3_wallet_id of this User.  # noqa: E501


        :return: The primary_web3_wallet_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._primary_web3_wallet_id

    @primary_web3_wallet_id.setter
    def primary_web3_wallet_id(self, primary_web3_wallet_id):
        """Sets the primary_web3_wallet_id of this User.


        :param primary_web3_wallet_id: The primary_web3_wallet_id of this User.  # noqa: E501
        :type: str
        """

        self._primary_web3_wallet_id = primary_web3_wallet_id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this User.  # noqa: E501


        :return: The profile_image_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this User.


        :param profile_image_url: The profile_image_url of this User.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def image_url(self):
        """Gets the image_url of this User.  # noqa: E501


        :return: The image_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this User.


        :param image_url: The image_url of this User.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def has_image(self):
        """Gets the has_image of this User.  # noqa: E501


        :return: The has_image of this User.  # noqa: E501
        :rtype: bool
        """
        return self._has_image

    @has_image.setter
    def has_image(self, has_image):
        """Sets the has_image of this User.


        :param has_image: The has_image of this User.  # noqa: E501
        :type: bool
        """

        self._has_image = has_image

    @property
    def public_metadata(self):
        """Gets the public_metadata of this User.  # noqa: E501


        :return: The public_metadata of this User.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this User.


        :param public_metadata: The public_metadata of this User.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def private_metadata(self):
        """Gets the private_metadata of this User.  # noqa: E501


        :return: The private_metadata of this User.  # noqa: E501
        :rtype: object
        """
        return self._private_metadata

    @private_metadata.setter
    def private_metadata(self, private_metadata):
        """Sets the private_metadata of this User.


        :param private_metadata: The private_metadata of this User.  # noqa: E501
        :type: object
        """

        self._private_metadata = private_metadata

    @property
    def unsafe_metadata(self):
        """Gets the unsafe_metadata of this User.  # noqa: E501


        :return: The unsafe_metadata of this User.  # noqa: E501
        :rtype: object
        """
        return self._unsafe_metadata

    @unsafe_metadata.setter
    def unsafe_metadata(self, unsafe_metadata):
        """Sets the unsafe_metadata of this User.


        :param unsafe_metadata: The unsafe_metadata of this User.  # noqa: E501
        :type: object
        """

        self._unsafe_metadata = unsafe_metadata

    @property
    def email_addresses(self):
        """Gets the email_addresses of this User.  # noqa: E501


        :return: The email_addresses of this User.  # noqa: E501
        :rtype: list[EmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this User.


        :param email_addresses: The email_addresses of this User.  # noqa: E501
        :type: list[EmailAddress]
        """

        self._email_addresses = email_addresses

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this User.  # noqa: E501


        :return: The phone_numbers of this User.  # noqa: E501
        :rtype: list[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this User.


        :param phone_numbers: The phone_numbers of this User.  # noqa: E501
        :type: list[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def web3_wallets(self):
        """Gets the web3_wallets of this User.  # noqa: E501


        :return: The web3_wallets of this User.  # noqa: E501
        :rtype: list[Web3Wallet]
        """
        return self._web3_wallets

    @web3_wallets.setter
    def web3_wallets(self, web3_wallets):
        """Sets the web3_wallets of this User.


        :param web3_wallets: The web3_wallets of this User.  # noqa: E501
        :type: list[Web3Wallet]
        """

        self._web3_wallets = web3_wallets

    @property
    def password_enabled(self):
        """Gets the password_enabled of this User.  # noqa: E501


        :return: The password_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._password_enabled

    @password_enabled.setter
    def password_enabled(self, password_enabled):
        """Sets the password_enabled of this User.


        :param password_enabled: The password_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._password_enabled = password_enabled

    @property
    def two_factor_enabled(self):
        """Gets the two_factor_enabled of this User.  # noqa: E501


        :return: The two_factor_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._two_factor_enabled

    @two_factor_enabled.setter
    def two_factor_enabled(self, two_factor_enabled):
        """Sets the two_factor_enabled of this User.


        :param two_factor_enabled: The two_factor_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._two_factor_enabled = two_factor_enabled

    @property
    def totp_enabled(self):
        """Gets the totp_enabled of this User.  # noqa: E501


        :return: The totp_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._totp_enabled

    @totp_enabled.setter
    def totp_enabled(self, totp_enabled):
        """Sets the totp_enabled of this User.


        :param totp_enabled: The totp_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._totp_enabled = totp_enabled

    @property
    def backup_code_enabled(self):
        """Gets the backup_code_enabled of this User.  # noqa: E501


        :return: The backup_code_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._backup_code_enabled

    @backup_code_enabled.setter
    def backup_code_enabled(self, backup_code_enabled):
        """Sets the backup_code_enabled of this User.


        :param backup_code_enabled: The backup_code_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._backup_code_enabled = backup_code_enabled

    @property
    def external_accounts(self):
        """Gets the external_accounts of this User.  # noqa: E501


        :return: The external_accounts of this User.  # noqa: E501
        :rtype: list[object]
        """
        return self._external_accounts

    @external_accounts.setter
    def external_accounts(self, external_accounts):
        """Sets the external_accounts of this User.


        :param external_accounts: The external_accounts of this User.  # noqa: E501
        :type: list[object]
        """

        self._external_accounts = external_accounts

    @property
    def saml_accounts(self):
        """Gets the saml_accounts of this User.  # noqa: E501


        :return: The saml_accounts of this User.  # noqa: E501
        :rtype: list[SAMLAccount]
        """
        return self._saml_accounts

    @saml_accounts.setter
    def saml_accounts(self, saml_accounts):
        """Sets the saml_accounts of this User.


        :param saml_accounts: The saml_accounts of this User.  # noqa: E501
        :type: list[SAMLAccount]
        """

        self._saml_accounts = saml_accounts

    @property
    def last_sign_in_at(self):
        """Gets the last_sign_in_at of this User.  # noqa: E501

        Unix timestamp of last sign-in.   # noqa: E501

        :return: The last_sign_in_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_sign_in_at

    @last_sign_in_at.setter
    def last_sign_in_at(self, last_sign_in_at):
        """Sets the last_sign_in_at of this User.

        Unix timestamp of last sign-in.   # noqa: E501

        :param last_sign_in_at: The last_sign_in_at of this User.  # noqa: E501
        :type: int
        """

        self._last_sign_in_at = last_sign_in_at

    @property
    def banned(self):
        """Gets the banned of this User.  # noqa: E501

        Flag to denote whether user is banned or not.   # noqa: E501

        :return: The banned of this User.  # noqa: E501
        :rtype: bool
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """Sets the banned of this User.

        Flag to denote whether user is banned or not.   # noqa: E501

        :param banned: The banned of this User.  # noqa: E501
        :type: bool
        """

        self._banned = banned

    @property
    def locked(self):
        """Gets the locked of this User.  # noqa: E501

        Flag to denote whether user is currently locked, i.e. restricted from signing in or not.   # noqa: E501

        :return: The locked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this User.

        Flag to denote whether user is currently locked, i.e. restricted from signing in or not.   # noqa: E501

        :param locked: The locked of this User.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def lockout_expires_in_seconds(self):
        """Gets the lockout_expires_in_seconds of this User.  # noqa: E501

        The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.   # noqa: E501

        :return: The lockout_expires_in_seconds of this User.  # noqa: E501
        :rtype: int
        """
        return self._lockout_expires_in_seconds

    @lockout_expires_in_seconds.setter
    def lockout_expires_in_seconds(self, lockout_expires_in_seconds):
        """Sets the lockout_expires_in_seconds of this User.

        The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.   # noqa: E501

        :param lockout_expires_in_seconds: The lockout_expires_in_seconds of this User.  # noqa: E501
        :type: int
        """

        self._lockout_expires_in_seconds = lockout_expires_in_seconds

    @property
    def verification_attempts_remaining(self):
        """Gets the verification_attempts_remaining of this User.  # noqa: E501

        The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.   # noqa: E501

        :return: The verification_attempts_remaining of this User.  # noqa: E501
        :rtype: int
        """
        return self._verification_attempts_remaining

    @verification_attempts_remaining.setter
    def verification_attempts_remaining(self, verification_attempts_remaining):
        """Sets the verification_attempts_remaining of this User.

        The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.   # noqa: E501

        :param verification_attempts_remaining: The verification_attempts_remaining of this User.  # noqa: E501
        :type: int
        """

        self._verification_attempts_remaining = verification_attempts_remaining

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501

        Unix timestamp of last update.   # noqa: E501

        :return: The updated_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.

        Unix timestamp of last update.   # noqa: E501

        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501

        Unix timestamp of creation.   # noqa: E501

        :return: The created_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        Unix timestamp of creation.   # noqa: E501

        :param created_at: The created_at of this User.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def delete_self_enabled(self):
        """Gets the delete_self_enabled of this User.  # noqa: E501

        If enabled, user can delete themselves via FAPI.   # noqa: E501

        :return: The delete_self_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._delete_self_enabled

    @delete_self_enabled.setter
    def delete_self_enabled(self, delete_self_enabled):
        """Sets the delete_self_enabled of this User.

        If enabled, user can delete themselves via FAPI.   # noqa: E501

        :param delete_self_enabled: The delete_self_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._delete_self_enabled = delete_self_enabled

    @property
    def create_organization_enabled(self):
        """Gets the create_organization_enabled of this User.  # noqa: E501

        If enabled, user can create organizations via FAPI.   # noqa: E501

        :return: The create_organization_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._create_organization_enabled

    @create_organization_enabled.setter
    def create_organization_enabled(self, create_organization_enabled):
        """Sets the create_organization_enabled of this User.

        If enabled, user can create organizations via FAPI.   # noqa: E501

        :param create_organization_enabled: The create_organization_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._create_organization_enabled = create_organization_enabled

    @property
    def last_active_at(self):
        """Gets the last_active_at of this User.  # noqa: E501

        Unix timestamp of the latest session activity, with day precision.   # noqa: E501

        :return: The last_active_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_active_at

    @last_active_at.setter
    def last_active_at(self, last_active_at):
        """Sets the last_active_at of this User.

        Unix timestamp of the latest session activity, with day precision.   # noqa: E501

        :param last_active_at: The last_active_at of this User.  # noqa: E501
        :type: int
        """

        self._last_active_at = last_active_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
