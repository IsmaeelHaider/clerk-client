# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProxyCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'domain_id': 'str',
        'last_run_at': 'int',
        'proxy_url': 'str',
        'successful': 'bool',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'domain_id': 'domain_id',
        'last_run_at': 'last_run_at',
        'proxy_url': 'proxy_url',
        'successful': 'successful',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, object=None, id=None, domain_id=None, last_run_at=None, proxy_url=None, successful=None, created_at=None, updated_at=None):  # noqa: E501
        """ProxyCheck - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._domain_id = None
        self._last_run_at = None
        self._proxy_url = None
        self._successful = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.object = object
        self.id = id
        self.domain_id = domain_id
        self.last_run_at = last_run_at
        self.proxy_url = proxy_url
        self.successful = successful
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def object(self):
        """Gets the object of this ProxyCheck.  # noqa: E501


        :return: The object of this ProxyCheck.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ProxyCheck.


        :param object: The object of this ProxyCheck.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["proxy_check"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def id(self):
        """Gets the id of this ProxyCheck.  # noqa: E501


        :return: The id of this ProxyCheck.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyCheck.


        :param id: The id of this ProxyCheck.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def domain_id(self):
        """Gets the domain_id of this ProxyCheck.  # noqa: E501


        :return: The domain_id of this ProxyCheck.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this ProxyCheck.


        :param domain_id: The domain_id of this ProxyCheck.  # noqa: E501
        :type: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")  # noqa: E501

        self._domain_id = domain_id

    @property
    def last_run_at(self):
        """Gets the last_run_at of this ProxyCheck.  # noqa: E501


        :return: The last_run_at of this ProxyCheck.  # noqa: E501
        :rtype: int
        """
        return self._last_run_at

    @last_run_at.setter
    def last_run_at(self, last_run_at):
        """Sets the last_run_at of this ProxyCheck.


        :param last_run_at: The last_run_at of this ProxyCheck.  # noqa: E501
        :type: int
        """
        if last_run_at is None:
            raise ValueError("Invalid value for `last_run_at`, must not be `None`")  # noqa: E501

        self._last_run_at = last_run_at

    @property
    def proxy_url(self):
        """Gets the proxy_url of this ProxyCheck.  # noqa: E501


        :return: The proxy_url of this ProxyCheck.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this ProxyCheck.


        :param proxy_url: The proxy_url of this ProxyCheck.  # noqa: E501
        :type: str
        """
        if proxy_url is None:
            raise ValueError("Invalid value for `proxy_url`, must not be `None`")  # noqa: E501

        self._proxy_url = proxy_url

    @property
    def successful(self):
        """Gets the successful of this ProxyCheck.  # noqa: E501


        :return: The successful of this ProxyCheck.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this ProxyCheck.


        :param successful: The successful of this ProxyCheck.  # noqa: E501
        :type: bool
        """
        if successful is None:
            raise ValueError("Invalid value for `successful`, must not be `None`")  # noqa: E501

        self._successful = successful

    @property
    def created_at(self):
        """Gets the created_at of this ProxyCheck.  # noqa: E501


        :return: The created_at of this ProxyCheck.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProxyCheck.


        :param created_at: The created_at of this ProxyCheck.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ProxyCheck.  # noqa: E501


        :return: The updated_at of this ProxyCheck.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProxyCheck.


        :param updated_at: The updated_at of this ProxyCheck.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
