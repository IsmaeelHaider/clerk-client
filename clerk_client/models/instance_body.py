# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_mode': 'bool',
        'hibp': 'bool',
        'enhanced_email_deliverability': 'bool',
        'support_email': 'str',
        'clerk_js_version': 'str',
        'development_origin': 'str',
        'allowed_origins': 'list[str]',
        'cookieless_dev': 'bool',
        'url_based_session_syncing': 'bool'
    }

    attribute_map = {
        'test_mode': 'test_mode',
        'hibp': 'hibp',
        'enhanced_email_deliverability': 'enhanced_email_deliverability',
        'support_email': 'support_email',
        'clerk_js_version': 'clerk_js_version',
        'development_origin': 'development_origin',
        'allowed_origins': 'allowed_origins',
        'cookieless_dev': 'cookieless_dev',
        'url_based_session_syncing': 'url_based_session_syncing'
    }

    def __init__(self, test_mode=None, hibp=None, enhanced_email_deliverability=None, support_email=None, clerk_js_version=None, development_origin=None, allowed_origins=None, cookieless_dev=None, url_based_session_syncing=None):  # noqa: E501
        """InstanceBody - a model defined in Swagger"""  # noqa: E501
        self._test_mode = None
        self._hibp = None
        self._enhanced_email_deliverability = None
        self._support_email = None
        self._clerk_js_version = None
        self._development_origin = None
        self._allowed_origins = None
        self._cookieless_dev = None
        self._url_based_session_syncing = None
        self.discriminator = None
        if test_mode is not None:
            self.test_mode = test_mode
        if hibp is not None:
            self.hibp = hibp
        if enhanced_email_deliverability is not None:
            self.enhanced_email_deliverability = enhanced_email_deliverability
        if support_email is not None:
            self.support_email = support_email
        if clerk_js_version is not None:
            self.clerk_js_version = clerk_js_version
        if development_origin is not None:
            self.development_origin = development_origin
        if allowed_origins is not None:
            self.allowed_origins = allowed_origins
        if cookieless_dev is not None:
            self.cookieless_dev = cookieless_dev
        if url_based_session_syncing is not None:
            self.url_based_session_syncing = url_based_session_syncing

    @property
    def test_mode(self):
        """Gets the test_mode of this InstanceBody.  # noqa: E501

        Toggles test mode for this instance, allowing the use of test email addresses and phone numbers. Defaults to true for development instances.  # noqa: E501

        :return: The test_mode of this InstanceBody.  # noqa: E501
        :rtype: bool
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this InstanceBody.

        Toggles test mode for this instance, allowing the use of test email addresses and phone numbers. Defaults to true for development instances.  # noqa: E501

        :param test_mode: The test_mode of this InstanceBody.  # noqa: E501
        :type: bool
        """

        self._test_mode = test_mode

    @property
    def hibp(self):
        """Gets the hibp of this InstanceBody.  # noqa: E501

        Whether the instance should be using the HIBP service to check passwords for breaches  # noqa: E501

        :return: The hibp of this InstanceBody.  # noqa: E501
        :rtype: bool
        """
        return self._hibp

    @hibp.setter
    def hibp(self, hibp):
        """Sets the hibp of this InstanceBody.

        Whether the instance should be using the HIBP service to check passwords for breaches  # noqa: E501

        :param hibp: The hibp of this InstanceBody.  # noqa: E501
        :type: bool
        """

        self._hibp = hibp

    @property
    def enhanced_email_deliverability(self):
        """Gets the enhanced_email_deliverability of this InstanceBody.  # noqa: E501

        The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain. This can be helpful if you do not have a high domain reputation.  # noqa: E501

        :return: The enhanced_email_deliverability of this InstanceBody.  # noqa: E501
        :rtype: bool
        """
        return self._enhanced_email_deliverability

    @enhanced_email_deliverability.setter
    def enhanced_email_deliverability(self, enhanced_email_deliverability):
        """Sets the enhanced_email_deliverability of this InstanceBody.

        The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain. This can be helpful if you do not have a high domain reputation.  # noqa: E501

        :param enhanced_email_deliverability: The enhanced_email_deliverability of this InstanceBody.  # noqa: E501
        :type: bool
        """

        self._enhanced_email_deliverability = enhanced_email_deliverability

    @property
    def support_email(self):
        """Gets the support_email of this InstanceBody.  # noqa: E501


        :return: The support_email of this InstanceBody.  # noqa: E501
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this InstanceBody.


        :param support_email: The support_email of this InstanceBody.  # noqa: E501
        :type: str
        """

        self._support_email = support_email

    @property
    def clerk_js_version(self):
        """Gets the clerk_js_version of this InstanceBody.  # noqa: E501


        :return: The clerk_js_version of this InstanceBody.  # noqa: E501
        :rtype: str
        """
        return self._clerk_js_version

    @clerk_js_version.setter
    def clerk_js_version(self, clerk_js_version):
        """Sets the clerk_js_version of this InstanceBody.


        :param clerk_js_version: The clerk_js_version of this InstanceBody.  # noqa: E501
        :type: str
        """

        self._clerk_js_version = clerk_js_version

    @property
    def development_origin(self):
        """Gets the development_origin of this InstanceBody.  # noqa: E501


        :return: The development_origin of this InstanceBody.  # noqa: E501
        :rtype: str
        """
        return self._development_origin

    @development_origin.setter
    def development_origin(self, development_origin):
        """Sets the development_origin of this InstanceBody.


        :param development_origin: The development_origin of this InstanceBody.  # noqa: E501
        :type: str
        """

        self._development_origin = development_origin

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this InstanceBody.  # noqa: E501

        For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value. For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost.  # noqa: E501

        :return: The allowed_origins of this InstanceBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this InstanceBody.

        For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value. For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost.  # noqa: E501

        :param allowed_origins: The allowed_origins of this InstanceBody.  # noqa: E501
        :type: list[str]
        """

        self._allowed_origins = allowed_origins

    @property
    def cookieless_dev(self):
        """Gets the cookieless_dev of this InstanceBody.  # noqa: E501

        Whether the instance should operate in cookieless development mode (i.e. without third-party cookies). Deprecated: Please use `url_based_session_syncing` instead.  # noqa: E501

        :return: The cookieless_dev of this InstanceBody.  # noqa: E501
        :rtype: bool
        """
        return self._cookieless_dev

    @cookieless_dev.setter
    def cookieless_dev(self, cookieless_dev):
        """Sets the cookieless_dev of this InstanceBody.

        Whether the instance should operate in cookieless development mode (i.e. without third-party cookies). Deprecated: Please use `url_based_session_syncing` instead.  # noqa: E501

        :param cookieless_dev: The cookieless_dev of this InstanceBody.  # noqa: E501
        :type: bool
        """

        self._cookieless_dev = cookieless_dev

    @property
    def url_based_session_syncing(self):
        """Gets the url_based_session_syncing of this InstanceBody.  # noqa: E501

        Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).  # noqa: E501

        :return: The url_based_session_syncing of this InstanceBody.  # noqa: E501
        :rtype: bool
        """
        return self._url_based_session_syncing

    @url_based_session_syncing.setter
    def url_based_session_syncing(self, url_based_session_syncing):
        """Sets the url_based_session_syncing of this InstanceBody.

        Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).  # noqa: E501

        :param url_based_session_syncing: The url_based_session_syncing of this InstanceBody.  # noqa: E501
        :type: bool
        """

        self._url_based_session_syncing = url_based_session_syncing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
