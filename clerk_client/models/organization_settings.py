# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'enabled': 'bool',
        'max_allowed_memberships': 'int',
        'max_allowed_roles': 'int',
        'max_allowed_permissions': 'int',
        'creator_role': 'str',
        'admin_delete_enabled': 'bool',
        'domains_enabled': 'bool',
        'domains_enrollment_modes': 'list[str]',
        'domains_default_role': 'str'
    }

    attribute_map = {
        'object': 'object',
        'enabled': 'enabled',
        'max_allowed_memberships': 'max_allowed_memberships',
        'max_allowed_roles': 'max_allowed_roles',
        'max_allowed_permissions': 'max_allowed_permissions',
        'creator_role': 'creator_role',
        'admin_delete_enabled': 'admin_delete_enabled',
        'domains_enabled': 'domains_enabled',
        'domains_enrollment_modes': 'domains_enrollment_modes',
        'domains_default_role': 'domains_default_role'
    }

    def __init__(self, object=None, enabled=None, max_allowed_memberships=None, max_allowed_roles=None, max_allowed_permissions=None, creator_role=None, admin_delete_enabled=None, domains_enabled=None, domains_enrollment_modes=None, domains_default_role=None):  # noqa: E501
        """OrganizationSettings - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._enabled = None
        self._max_allowed_memberships = None
        self._max_allowed_roles = None
        self._max_allowed_permissions = None
        self._creator_role = None
        self._admin_delete_enabled = None
        self._domains_enabled = None
        self._domains_enrollment_modes = None
        self._domains_default_role = None
        self.discriminator = None
        self.object = object
        self.enabled = enabled
        self.max_allowed_memberships = max_allowed_memberships
        if max_allowed_roles is not None:
            self.max_allowed_roles = max_allowed_roles
        if max_allowed_permissions is not None:
            self.max_allowed_permissions = max_allowed_permissions
        self.creator_role = creator_role
        self.admin_delete_enabled = admin_delete_enabled
        self.domains_enabled = domains_enabled
        self.domains_enrollment_modes = domains_enrollment_modes
        self.domains_default_role = domains_default_role

    @property
    def object(self):
        """Gets the object of this OrganizationSettings.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.  # noqa: E501

        :return: The object of this OrganizationSettings.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this OrganizationSettings.

        String representing the object's type. Objects of the same type share the same value.  # noqa: E501

        :param object: The object of this OrganizationSettings.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["organization_settings"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def enabled(self):
        """Gets the enabled of this OrganizationSettings.  # noqa: E501


        :return: The enabled of this OrganizationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OrganizationSettings.


        :param enabled: The enabled of this OrganizationSettings.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def max_allowed_memberships(self):
        """Gets the max_allowed_memberships of this OrganizationSettings.  # noqa: E501


        :return: The max_allowed_memberships of this OrganizationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_allowed_memberships

    @max_allowed_memberships.setter
    def max_allowed_memberships(self, max_allowed_memberships):
        """Sets the max_allowed_memberships of this OrganizationSettings.


        :param max_allowed_memberships: The max_allowed_memberships of this OrganizationSettings.  # noqa: E501
        :type: int
        """
        if max_allowed_memberships is None:
            raise ValueError("Invalid value for `max_allowed_memberships`, must not be `None`")  # noqa: E501

        self._max_allowed_memberships = max_allowed_memberships

    @property
    def max_allowed_roles(self):
        """Gets the max_allowed_roles of this OrganizationSettings.  # noqa: E501


        :return: The max_allowed_roles of this OrganizationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_allowed_roles

    @max_allowed_roles.setter
    def max_allowed_roles(self, max_allowed_roles):
        """Sets the max_allowed_roles of this OrganizationSettings.


        :param max_allowed_roles: The max_allowed_roles of this OrganizationSettings.  # noqa: E501
        :type: int
        """

        self._max_allowed_roles = max_allowed_roles

    @property
    def max_allowed_permissions(self):
        """Gets the max_allowed_permissions of this OrganizationSettings.  # noqa: E501


        :return: The max_allowed_permissions of this OrganizationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_allowed_permissions

    @max_allowed_permissions.setter
    def max_allowed_permissions(self, max_allowed_permissions):
        """Sets the max_allowed_permissions of this OrganizationSettings.


        :param max_allowed_permissions: The max_allowed_permissions of this OrganizationSettings.  # noqa: E501
        :type: int
        """

        self._max_allowed_permissions = max_allowed_permissions

    @property
    def creator_role(self):
        """Gets the creator_role of this OrganizationSettings.  # noqa: E501

        The role key that a user will be assigned after creating an organization.  # noqa: E501

        :return: The creator_role of this OrganizationSettings.  # noqa: E501
        :rtype: str
        """
        return self._creator_role

    @creator_role.setter
    def creator_role(self, creator_role):
        """Sets the creator_role of this OrganizationSettings.

        The role key that a user will be assigned after creating an organization.  # noqa: E501

        :param creator_role: The creator_role of this OrganizationSettings.  # noqa: E501
        :type: str
        """
        if creator_role is None:
            raise ValueError("Invalid value for `creator_role`, must not be `None`")  # noqa: E501

        self._creator_role = creator_role

    @property
    def admin_delete_enabled(self):
        """Gets the admin_delete_enabled of this OrganizationSettings.  # noqa: E501

        The default for whether an admin can delete an organization with the Frontend API.  # noqa: E501

        :return: The admin_delete_enabled of this OrganizationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._admin_delete_enabled

    @admin_delete_enabled.setter
    def admin_delete_enabled(self, admin_delete_enabled):
        """Sets the admin_delete_enabled of this OrganizationSettings.

        The default for whether an admin can delete an organization with the Frontend API.  # noqa: E501

        :param admin_delete_enabled: The admin_delete_enabled of this OrganizationSettings.  # noqa: E501
        :type: bool
        """
        if admin_delete_enabled is None:
            raise ValueError("Invalid value for `admin_delete_enabled`, must not be `None`")  # noqa: E501

        self._admin_delete_enabled = admin_delete_enabled

    @property
    def domains_enabled(self):
        """Gets the domains_enabled of this OrganizationSettings.  # noqa: E501


        :return: The domains_enabled of this OrganizationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._domains_enabled

    @domains_enabled.setter
    def domains_enabled(self, domains_enabled):
        """Sets the domains_enabled of this OrganizationSettings.


        :param domains_enabled: The domains_enabled of this OrganizationSettings.  # noqa: E501
        :type: bool
        """
        if domains_enabled is None:
            raise ValueError("Invalid value for `domains_enabled`, must not be `None`")  # noqa: E501

        self._domains_enabled = domains_enabled

    @property
    def domains_enrollment_modes(self):
        """Gets the domains_enrollment_modes of this OrganizationSettings.  # noqa: E501


        :return: The domains_enrollment_modes of this OrganizationSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains_enrollment_modes

    @domains_enrollment_modes.setter
    def domains_enrollment_modes(self, domains_enrollment_modes):
        """Sets the domains_enrollment_modes of this OrganizationSettings.


        :param domains_enrollment_modes: The domains_enrollment_modes of this OrganizationSettings.  # noqa: E501
        :type: list[str]
        """
        if domains_enrollment_modes is None:
            raise ValueError("Invalid value for `domains_enrollment_modes`, must not be `None`")  # noqa: E501
        allowed_values = ["manual_invitation", "automatic_invitation", "automatic_suggestion"]  # noqa: E501
        if not set(domains_enrollment_modes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `domains_enrollment_modes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(domains_enrollment_modes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._domains_enrollment_modes = domains_enrollment_modes

    @property
    def domains_default_role(self):
        """Gets the domains_default_role of this OrganizationSettings.  # noqa: E501

        The role key that it will be used in order to create an organization invitation or suggestion.  # noqa: E501

        :return: The domains_default_role of this OrganizationSettings.  # noqa: E501
        :rtype: str
        """
        return self._domains_default_role

    @domains_default_role.setter
    def domains_default_role(self, domains_default_role):
        """Sets the domains_default_role of this OrganizationSettings.

        The role key that it will be used in order to create an organization invitation or suggestion.  # noqa: E501

        :param domains_default_role: The domains_default_role of this OrganizationSettings.  # noqa: E501
        :type: str
        """
        if domains_default_role is None:
            raise ValueError("Invalid value for `domains_default_role`, must not be `None`")  # noqa: E501

        self._domains_default_role = domains_default_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
