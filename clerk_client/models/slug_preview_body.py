# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SlugPreviewBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'body': 'str',
        'from_email_name': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'body': 'body',
        'from_email_name': 'from_email_name'
    }

    def __init__(self, subject=None, body=None, from_email_name=None):  # noqa: E501
        """SlugPreviewBody - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._body = None
        self._from_email_name = None
        self.discriminator = None
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if from_email_name is not None:
            self.from_email_name = from_email_name

    @property
    def subject(self):
        """Gets the subject of this SlugPreviewBody.  # noqa: E501

        The email subject. Applicable only to email templates.  # noqa: E501

        :return: The subject of this SlugPreviewBody.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SlugPreviewBody.

        The email subject. Applicable only to email templates.  # noqa: E501

        :param subject: The subject of this SlugPreviewBody.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this SlugPreviewBody.  # noqa: E501

        The template body before variable interpolation  # noqa: E501

        :return: The body of this SlugPreviewBody.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SlugPreviewBody.

        The template body before variable interpolation  # noqa: E501

        :param body: The body of this SlugPreviewBody.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def from_email_name(self):
        """Gets the from_email_name of this SlugPreviewBody.  # noqa: E501

        The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.  # noqa: E501

        :return: The from_email_name of this SlugPreviewBody.  # noqa: E501
        :rtype: str
        """
        return self._from_email_name

    @from_email_name.setter
    def from_email_name(self, from_email_name):
        """Sets the from_email_name of this SlugPreviewBody.

        The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.  # noqa: E501

        :param from_email_name: The from_email_name of this SlugPreviewBody.  # noqa: E501
        :type: str
        """

        self._from_email_name = from_email_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlugPreviewBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlugPreviewBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
