# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'session_ids': 'list[str]',
        'sessions': 'list[Session]',
        'sign_in_id': 'str',
        'sign_up_id': 'str',
        'last_active_session_id': 'str',
        'updated_at': 'int',
        'created_at': 'int'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'session_ids': 'session_ids',
        'sessions': 'sessions',
        'sign_in_id': 'sign_in_id',
        'sign_up_id': 'sign_up_id',
        'last_active_session_id': 'last_active_session_id',
        'updated_at': 'updated_at',
        'created_at': 'created_at'
    }

    def __init__(self, object=None, id=None, session_ids=None, sessions=None, sign_in_id=None, sign_up_id=None, last_active_session_id=None, updated_at=None, created_at=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._session_ids = None
        self._sessions = None
        self._sign_in_id = None
        self._sign_up_id = None
        self._last_active_session_id = None
        self._updated_at = None
        self._created_at = None
        self.discriminator = None
        self.object = object
        self.id = id
        self.session_ids = session_ids
        self.sessions = sessions
        self.sign_in_id = sign_in_id
        self.sign_up_id = sign_up_id
        self.last_active_session_id = last_active_session_id
        self.updated_at = updated_at
        self.created_at = created_at

    @property
    def object(self):
        """Gets the object of this Client.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this Client.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Client.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this Client.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["client"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501

        String representing the identifier of the session.   # noqa: E501

        :return: The id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.

        String representing the identifier of the session.   # noqa: E501

        :param id: The id of this Client.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def session_ids(self):
        """Gets the session_ids of this Client.  # noqa: E501


        :return: The session_ids of this Client.  # noqa: E501
        :rtype: list[str]
        """
        return self._session_ids

    @session_ids.setter
    def session_ids(self, session_ids):
        """Sets the session_ids of this Client.


        :param session_ids: The session_ids of this Client.  # noqa: E501
        :type: list[str]
        """
        if session_ids is None:
            raise ValueError("Invalid value for `session_ids`, must not be `None`")  # noqa: E501

        self._session_ids = session_ids

    @property
    def sessions(self):
        """Gets the sessions of this Client.  # noqa: E501


        :return: The sessions of this Client.  # noqa: E501
        :rtype: list[Session]
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this Client.


        :param sessions: The sessions of this Client.  # noqa: E501
        :type: list[Session]
        """
        if sessions is None:
            raise ValueError("Invalid value for `sessions`, must not be `None`")  # noqa: E501

        self._sessions = sessions

    @property
    def sign_in_id(self):
        """Gets the sign_in_id of this Client.  # noqa: E501


        :return: The sign_in_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._sign_in_id

    @sign_in_id.setter
    def sign_in_id(self, sign_in_id):
        """Sets the sign_in_id of this Client.


        :param sign_in_id: The sign_in_id of this Client.  # noqa: E501
        :type: str
        """
        if sign_in_id is None:
            raise ValueError("Invalid value for `sign_in_id`, must not be `None`")  # noqa: E501

        self._sign_in_id = sign_in_id

    @property
    def sign_up_id(self):
        """Gets the sign_up_id of this Client.  # noqa: E501


        :return: The sign_up_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._sign_up_id

    @sign_up_id.setter
    def sign_up_id(self, sign_up_id):
        """Sets the sign_up_id of this Client.


        :param sign_up_id: The sign_up_id of this Client.  # noqa: E501
        :type: str
        """
        if sign_up_id is None:
            raise ValueError("Invalid value for `sign_up_id`, must not be `None`")  # noqa: E501

        self._sign_up_id = sign_up_id

    @property
    def last_active_session_id(self):
        """Gets the last_active_session_id of this Client.  # noqa: E501

        Last active session_id.   # noqa: E501

        :return: The last_active_session_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._last_active_session_id

    @last_active_session_id.setter
    def last_active_session_id(self, last_active_session_id):
        """Sets the last_active_session_id of this Client.

        Last active session_id.   # noqa: E501

        :param last_active_session_id: The last_active_session_id of this Client.  # noqa: E501
        :type: str
        """
        if last_active_session_id is None:
            raise ValueError("Invalid value for `last_active_session_id`, must not be `None`")  # noqa: E501

        self._last_active_session_id = last_active_session_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Client.  # noqa: E501

        Unix timestamp of last update.   # noqa: E501

        :return: The updated_at of this Client.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Client.

        Unix timestamp of last update.   # noqa: E501

        :param updated_at: The updated_at of this Client.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Client.  # noqa: E501

        Unix timestamp of creation.   # noqa: E501

        :return: The created_at of this Client.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Client.

        Unix timestamp of creation.   # noqa: E501

        :param created_at: The created_at of this Client.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
