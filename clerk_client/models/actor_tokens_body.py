# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActorTokensBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'actor': 'object',
        'expires_in_seconds': 'int',
        'session_max_duration_in_seconds': 'int'
    }

    attribute_map = {
        'user_id': 'user_id',
        'actor': 'actor',
        'expires_in_seconds': 'expires_in_seconds',
        'session_max_duration_in_seconds': 'session_max_duration_in_seconds'
    }

    def __init__(self, user_id=None, actor=None, expires_in_seconds=3600, session_max_duration_in_seconds=1800):  # noqa: E501
        """ActorTokensBody - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._actor = None
        self._expires_in_seconds = None
        self._session_max_duration_in_seconds = None
        self.discriminator = None
        self.user_id = user_id
        self.actor = actor
        if expires_in_seconds is not None:
            self.expires_in_seconds = expires_in_seconds
        if session_max_duration_in_seconds is not None:
            self.session_max_duration_in_seconds = session_max_duration_in_seconds

    @property
    def user_id(self):
        """Gets the user_id of this ActorTokensBody.  # noqa: E501

        The ID of the user that can use the newly created sign in token.  # noqa: E501

        :return: The user_id of this ActorTokensBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActorTokensBody.

        The ID of the user that can use the newly created sign in token.  # noqa: E501

        :param user_id: The user_id of this ActorTokensBody.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def actor(self):
        """Gets the actor of this ActorTokensBody.  # noqa: E501

        The actor payload. It needs to include a sub property which should contain the ID of the actor. This whole payload will be also included in the JWT session token.  # noqa: E501

        :return: The actor of this ActorTokensBody.  # noqa: E501
        :rtype: object
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this ActorTokensBody.

        The actor payload. It needs to include a sub property which should contain the ID of the actor. This whole payload will be also included in the JWT session token.  # noqa: E501

        :param actor: The actor of this ActorTokensBody.  # noqa: E501
        :type: object
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")  # noqa: E501

        self._actor = actor

    @property
    def expires_in_seconds(self):
        """Gets the expires_in_seconds of this ActorTokensBody.  # noqa: E501

        Optional parameter to specify the life duration of the actor token in seconds. By default, the duration is 1 hour.  # noqa: E501

        :return: The expires_in_seconds of this ActorTokensBody.  # noqa: E501
        :rtype: int
        """
        return self._expires_in_seconds

    @expires_in_seconds.setter
    def expires_in_seconds(self, expires_in_seconds):
        """Sets the expires_in_seconds of this ActorTokensBody.

        Optional parameter to specify the life duration of the actor token in seconds. By default, the duration is 1 hour.  # noqa: E501

        :param expires_in_seconds: The expires_in_seconds of this ActorTokensBody.  # noqa: E501
        :type: int
        """

        self._expires_in_seconds = expires_in_seconds

    @property
    def session_max_duration_in_seconds(self):
        """Gets the session_max_duration_in_seconds of this ActorTokensBody.  # noqa: E501

        The maximum duration that the session which will be created by the generated actor token should last. By default, the duration of a session created via an actor token, lasts 30 minutes.  # noqa: E501

        :return: The session_max_duration_in_seconds of this ActorTokensBody.  # noqa: E501
        :rtype: int
        """
        return self._session_max_duration_in_seconds

    @session_max_duration_in_seconds.setter
    def session_max_duration_in_seconds(self, session_max_duration_in_seconds):
        """Sets the session_max_duration_in_seconds of this ActorTokensBody.

        The maximum duration that the session which will be created by the generated actor token should last. By default, the duration of a session created via an actor token, lasts 30 minutes.  # noqa: E501

        :param session_max_duration_in_seconds: The session_max_duration_in_seconds of this ActorTokensBody.  # noqa: E501
        :type: int
        """

        self._session_max_duration_in_seconds = session_max_duration_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActorTokensBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActorTokensBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
