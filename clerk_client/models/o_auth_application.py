# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OAuthApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'instance_id': 'str',
        'name': 'str',
        'client_id': 'str',
        'public': 'bool',
        'scopes': 'str',
        'callback_url': 'str',
        'authorize_url': 'str',
        'token_fetch_url': 'str',
        'user_info_url': 'str',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'instance_id': 'instance_id',
        'name': 'name',
        'client_id': 'client_id',
        'public': 'public',
        'scopes': 'scopes',
        'callback_url': 'callback_url',
        'authorize_url': 'authorize_url',
        'token_fetch_url': 'token_fetch_url',
        'user_info_url': 'user_info_url',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, object=None, id=None, instance_id=None, name=None, client_id=None, public=None, scopes=None, callback_url=None, authorize_url=None, token_fetch_url=None, user_info_url=None, created_at=None, updated_at=None):  # noqa: E501
        """OAuthApplication - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._instance_id = None
        self._name = None
        self._client_id = None
        self._public = None
        self._scopes = None
        self._callback_url = None
        self._authorize_url = None
        self._token_fetch_url = None
        self._user_info_url = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.object = object
        self.id = id
        self.instance_id = instance_id
        self.name = name
        self.client_id = client_id
        self.public = public
        self.scopes = scopes
        self.callback_url = callback_url
        self.authorize_url = authorize_url
        self.token_fetch_url = token_fetch_url
        self.user_info_url = user_info_url
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def object(self):
        """Gets the object of this OAuthApplication.  # noqa: E501


        :return: The object of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this OAuthApplication.


        :param object: The object of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["oauth_application"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def id(self):
        """Gets the id of this OAuthApplication.  # noqa: E501


        :return: The id of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuthApplication.


        :param id: The id of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this OAuthApplication.  # noqa: E501


        :return: The instance_id of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this OAuthApplication.


        :param instance_id: The instance_id of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def name(self):
        """Gets the name of this OAuthApplication.  # noqa: E501


        :return: The name of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuthApplication.


        :param name: The name of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def client_id(self):
        """Gets the client_id of this OAuthApplication.  # noqa: E501


        :return: The client_id of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthApplication.


        :param client_id: The client_id of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def public(self):
        """Gets the public of this OAuthApplication.  # noqa: E501


        :return: The public of this OAuthApplication.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this OAuthApplication.


        :param public: The public of this OAuthApplication.  # noqa: E501
        :type: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def scopes(self):
        """Gets the scopes of this OAuthApplication.  # noqa: E501


        :return: The scopes of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OAuthApplication.


        :param scopes: The scopes of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    @property
    def callback_url(self):
        """Gets the callback_url of this OAuthApplication.  # noqa: E501


        :return: The callback_url of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this OAuthApplication.


        :param callback_url: The callback_url of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def authorize_url(self):
        """Gets the authorize_url of this OAuthApplication.  # noqa: E501


        :return: The authorize_url of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._authorize_url

    @authorize_url.setter
    def authorize_url(self, authorize_url):
        """Sets the authorize_url of this OAuthApplication.


        :param authorize_url: The authorize_url of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if authorize_url is None:
            raise ValueError("Invalid value for `authorize_url`, must not be `None`")  # noqa: E501

        self._authorize_url = authorize_url

    @property
    def token_fetch_url(self):
        """Gets the token_fetch_url of this OAuthApplication.  # noqa: E501


        :return: The token_fetch_url of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._token_fetch_url

    @token_fetch_url.setter
    def token_fetch_url(self, token_fetch_url):
        """Sets the token_fetch_url of this OAuthApplication.


        :param token_fetch_url: The token_fetch_url of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if token_fetch_url is None:
            raise ValueError("Invalid value for `token_fetch_url`, must not be `None`")  # noqa: E501

        self._token_fetch_url = token_fetch_url

    @property
    def user_info_url(self):
        """Gets the user_info_url of this OAuthApplication.  # noqa: E501


        :return: The user_info_url of this OAuthApplication.  # noqa: E501
        :rtype: str
        """
        return self._user_info_url

    @user_info_url.setter
    def user_info_url(self, user_info_url):
        """Sets the user_info_url of this OAuthApplication.


        :param user_info_url: The user_info_url of this OAuthApplication.  # noqa: E501
        :type: str
        """
        if user_info_url is None:
            raise ValueError("Invalid value for `user_info_url`, must not be `None`")  # noqa: E501

        self._user_info_url = user_info_url

    @property
    def created_at(self):
        """Gets the created_at of this OAuthApplication.  # noqa: E501

        Unix timestamp of creation.   # noqa: E501

        :return: The created_at of this OAuthApplication.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OAuthApplication.

        Unix timestamp of creation.   # noqa: E501

        :param created_at: The created_at of this OAuthApplication.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this OAuthApplication.  # noqa: E501

        Unix timestamp of last update.   # noqa: E501

        :return: The updated_at of this OAuthApplication.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OAuthApplication.

        Unix timestamp of last update.   # noqa: E501

        :param updated_at: The updated_at of this OAuthApplication.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
