# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'instance_id': 'str',
        'resource_type': 'str',
        'template_type': 'str',
        'name': 'str',
        'slug': 'str',
        'position': 'int',
        'can_revert': 'bool',
        'can_delete': 'bool',
        'subject': 'str',
        'markup': 'str',
        'body': 'str',
        'available_variables': 'list[str]',
        'required_variables': 'list[str]',
        'from_email_name': 'str',
        'delivered_by_clerk': 'bool',
        'updated_at': 'int',
        'created_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'instance_id': 'instance_id',
        'resource_type': 'resource_type',
        'template_type': 'template_type',
        'name': 'name',
        'slug': 'slug',
        'position': 'position',
        'can_revert': 'can_revert',
        'can_delete': 'can_delete',
        'subject': 'subject',
        'markup': 'markup',
        'body': 'body',
        'available_variables': 'available_variables',
        'required_variables': 'required_variables',
        'from_email_name': 'from_email_name',
        'delivered_by_clerk': 'delivered_by_clerk',
        'updated_at': 'updated_at',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, object=None, instance_id=None, resource_type=None, template_type=None, name=None, slug=None, position=None, can_revert=None, can_delete=None, subject=None, markup=None, body=None, available_variables=None, required_variables=None, from_email_name=None, delivered_by_clerk=None, updated_at=None, created_at=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._instance_id = None
        self._resource_type = None
        self._template_type = None
        self._name = None
        self._slug = None
        self._position = None
        self._can_revert = None
        self._can_delete = None
        self._subject = None
        self._markup = None
        self._body = None
        self._available_variables = None
        self._required_variables = None
        self._from_email_name = None
        self._delivered_by_clerk = None
        self._updated_at = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if object is not None:
            self.object = object
        if instance_id is not None:
            self.instance_id = instance_id
        if resource_type is not None:
            self.resource_type = resource_type
        if template_type is not None:
            self.template_type = template_type
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if position is not None:
            self.position = position
        if can_revert is not None:
            self.can_revert = can_revert
        if can_delete is not None:
            self.can_delete = can_delete
        if subject is not None:
            self.subject = subject
        if markup is not None:
            self.markup = markup
        if body is not None:
            self.body = body
        if available_variables is not None:
            self.available_variables = available_variables
        if required_variables is not None:
            self.required_variables = required_variables
        if from_email_name is not None:
            self.from_email_name = from_email_name
        if delivered_by_clerk is not None:
            self.delivered_by_clerk = delivered_by_clerk
        if updated_at is not None:
            self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this Template.  # noqa: E501


        :return: The id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.


        :param id: The id of this Template.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """Gets the object of this Template.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this Template.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Template.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this Template.  # noqa: E501
        :type: str
        """
        allowed_values = ["template"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def instance_id(self):
        """Gets the instance_id of this Template.  # noqa: E501

        the id of the instance the template belongs to  # noqa: E501

        :return: The instance_id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Template.

        the id of the instance the template belongs to  # noqa: E501

        :param instance_id: The instance_id of this Template.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def resource_type(self):
        """Gets the resource_type of this Template.  # noqa: E501

        whether this is a system (default) or user overridden) template  # noqa: E501

        :return: The resource_type of this Template.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Template.

        whether this is a system (default) or user overridden) template  # noqa: E501

        :param resource_type: The resource_type of this Template.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def template_type(self):
        """Gets the template_type of this Template.  # noqa: E501

        whether this is an email or SMS template  # noqa: E501

        :return: The template_type of this Template.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this Template.

        whether this is an email or SMS template  # noqa: E501

        :param template_type: The template_type of this Template.  # noqa: E501
        :type: str
        """

        self._template_type = template_type

    @property
    def name(self):
        """Gets the name of this Template.  # noqa: E501

        user-friendly name of the template  # noqa: E501

        :return: The name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.

        user-friendly name of the template  # noqa: E501

        :param name: The name of this Template.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Template.  # noqa: E501

        machine-friendly name of the template  # noqa: E501

        :return: The slug of this Template.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Template.

        machine-friendly name of the template  # noqa: E501

        :param slug: The slug of this Template.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def position(self):
        """Gets the position of this Template.  # noqa: E501

        position with the listing of templates  # noqa: E501

        :return: The position of this Template.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Template.

        position with the listing of templates  # noqa: E501

        :param position: The position of this Template.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def can_revert(self):
        """Gets the can_revert of this Template.  # noqa: E501

        whether this template can be reverted to the corresponding system default  # noqa: E501

        :return: The can_revert of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._can_revert

    @can_revert.setter
    def can_revert(self, can_revert):
        """Sets the can_revert of this Template.

        whether this template can be reverted to the corresponding system default  # noqa: E501

        :param can_revert: The can_revert of this Template.  # noqa: E501
        :type: bool
        """

        self._can_revert = can_revert

    @property
    def can_delete(self):
        """Gets the can_delete of this Template.  # noqa: E501

        whether this template can be deleted  # noqa: E501

        :return: The can_delete of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this Template.

        whether this template can be deleted  # noqa: E501

        :param can_delete: The can_delete of this Template.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def subject(self):
        """Gets the subject of this Template.  # noqa: E501

        email subject  # noqa: E501

        :return: The subject of this Template.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Template.

        email subject  # noqa: E501

        :param subject: The subject of this Template.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def markup(self):
        """Gets the markup of this Template.  # noqa: E501

        the editor markup used to generate the body of the template  # noqa: E501

        :return: The markup of this Template.  # noqa: E501
        :rtype: str
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this Template.

        the editor markup used to generate the body of the template  # noqa: E501

        :param markup: The markup of this Template.  # noqa: E501
        :type: str
        """

        self._markup = markup

    @property
    def body(self):
        """Gets the body of this Template.  # noqa: E501

        the template body before variable interpolation  # noqa: E501

        :return: The body of this Template.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Template.

        the template body before variable interpolation  # noqa: E501

        :param body: The body of this Template.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def available_variables(self):
        """Gets the available_variables of this Template.  # noqa: E501

        list of variables that are available for use in the template body  # noqa: E501

        :return: The available_variables of this Template.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_variables

    @available_variables.setter
    def available_variables(self, available_variables):
        """Sets the available_variables of this Template.

        list of variables that are available for use in the template body  # noqa: E501

        :param available_variables: The available_variables of this Template.  # noqa: E501
        :type: list[str]
        """

        self._available_variables = available_variables

    @property
    def required_variables(self):
        """Gets the required_variables of this Template.  # noqa: E501

        list of variables that must be contained in the template body  # noqa: E501

        :return: The required_variables of this Template.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_variables

    @required_variables.setter
    def required_variables(self, required_variables):
        """Sets the required_variables of this Template.

        list of variables that must be contained in the template body  # noqa: E501

        :param required_variables: The required_variables of this Template.  # noqa: E501
        :type: list[str]
        """

        self._required_variables = required_variables

    @property
    def from_email_name(self):
        """Gets the from_email_name of this Template.  # noqa: E501


        :return: The from_email_name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._from_email_name

    @from_email_name.setter
    def from_email_name(self, from_email_name):
        """Sets the from_email_name of this Template.


        :param from_email_name: The from_email_name of this Template.  # noqa: E501
        :type: str
        """

        self._from_email_name = from_email_name

    @property
    def delivered_by_clerk(self):
        """Gets the delivered_by_clerk of this Template.  # noqa: E501


        :return: The delivered_by_clerk of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._delivered_by_clerk

    @delivered_by_clerk.setter
    def delivered_by_clerk(self, delivered_by_clerk):
        """Sets the delivered_by_clerk of this Template.


        :param delivered_by_clerk: The delivered_by_clerk of this Template.  # noqa: E501
        :type: bool
        """

        self._delivered_by_clerk = delivered_by_clerk

    @property
    def updated_at(self):
        """Gets the updated_at of this Template.  # noqa: E501

        Unix timestamp of last update.   # noqa: E501

        :return: The updated_at of this Template.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Template.

        Unix timestamp of last update.   # noqa: E501

        :param updated_at: The updated_at of this Template.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Template.  # noqa: E501

        Unix timestamp of creation.   # noqa: E501

        :return: The created_at of this Template.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Template.

        Unix timestamp of creation.   # noqa: E501

        :param created_at: The created_at of this Template.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
