# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SamlConnectionsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'domain': 'str',
        'provider': 'str',
        'idp_entity_id': 'str',
        'idp_sso_url': 'str',
        'idp_certificate': 'str',
        'idp_metadata_url': 'str',
        'attribute_mapping': 'SamlConnectionsAttributeMapping'
    }

    attribute_map = {
        'name': 'name',
        'domain': 'domain',
        'provider': 'provider',
        'idp_entity_id': 'idp_entity_id',
        'idp_sso_url': 'idp_sso_url',
        'idp_certificate': 'idp_certificate',
        'idp_metadata_url': 'idp_metadata_url',
        'attribute_mapping': 'attribute_mapping'
    }

    def __init__(self, name=None, domain=None, provider=None, idp_entity_id=None, idp_sso_url=None, idp_certificate=None, idp_metadata_url=None, attribute_mapping=None):  # noqa: E501
        """SamlConnectionsBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._domain = None
        self._provider = None
        self._idp_entity_id = None
        self._idp_sso_url = None
        self._idp_certificate = None
        self._idp_metadata_url = None
        self._attribute_mapping = None
        self.discriminator = None
        self.name = name
        self.domain = domain
        self.provider = provider
        if idp_entity_id is not None:
            self.idp_entity_id = idp_entity_id
        if idp_sso_url is not None:
            self.idp_sso_url = idp_sso_url
        if idp_certificate is not None:
            self.idp_certificate = idp_certificate
        if idp_metadata_url is not None:
            self.idp_metadata_url = idp_metadata_url
        if attribute_mapping is not None:
            self.attribute_mapping = attribute_mapping

    @property
    def name(self):
        """Gets the name of this SamlConnectionsBody.  # noqa: E501

        The name to use as a label for this SAML Connection  # noqa: E501

        :return: The name of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SamlConnectionsBody.

        The name to use as a label for this SAML Connection  # noqa: E501

        :param name: The name of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def domain(self):
        """Gets the domain of this SamlConnectionsBody.  # noqa: E501

        The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.  # noqa: E501

        :return: The domain of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SamlConnectionsBody.

        The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.  # noqa: E501

        :param domain: The domain of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def provider(self):
        """Gets the provider of this SamlConnectionsBody.  # noqa: E501

        The IdP provider of the connection.  # noqa: E501

        :return: The provider of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SamlConnectionsBody.

        The IdP provider of the connection.  # noqa: E501

        :param provider: The provider of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["saml_custom", "saml_okta", "saml_google", "saml_microsoft"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def idp_entity_id(self):
        """Gets the idp_entity_id of this SamlConnectionsBody.  # noqa: E501

        The Entity ID as provided by the IdP  # noqa: E501

        :return: The idp_entity_id of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_entity_id

    @idp_entity_id.setter
    def idp_entity_id(self, idp_entity_id):
        """Sets the idp_entity_id of this SamlConnectionsBody.

        The Entity ID as provided by the IdP  # noqa: E501

        :param idp_entity_id: The idp_entity_id of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """

        self._idp_entity_id = idp_entity_id

    @property
    def idp_sso_url(self):
        """Gets the idp_sso_url of this SamlConnectionsBody.  # noqa: E501

        The Single-Sign On URL as provided by the IdP  # noqa: E501

        :return: The idp_sso_url of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_sso_url

    @idp_sso_url.setter
    def idp_sso_url(self, idp_sso_url):
        """Sets the idp_sso_url of this SamlConnectionsBody.

        The Single-Sign On URL as provided by the IdP  # noqa: E501

        :param idp_sso_url: The idp_sso_url of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """

        self._idp_sso_url = idp_sso_url

    @property
    def idp_certificate(self):
        """Gets the idp_certificate of this SamlConnectionsBody.  # noqa: E501

        The X.509 certificate as provided by the IdP  # noqa: E501

        :return: The idp_certificate of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_certificate

    @idp_certificate.setter
    def idp_certificate(self, idp_certificate):
        """Sets the idp_certificate of this SamlConnectionsBody.

        The X.509 certificate as provided by the IdP  # noqa: E501

        :param idp_certificate: The idp_certificate of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """

        self._idp_certificate = idp_certificate

    @property
    def idp_metadata_url(self):
        """Gets the idp_metadata_url of this SamlConnectionsBody.  # noqa: E501

        The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties  # noqa: E501

        :return: The idp_metadata_url of this SamlConnectionsBody.  # noqa: E501
        :rtype: str
        """
        return self._idp_metadata_url

    @idp_metadata_url.setter
    def idp_metadata_url(self, idp_metadata_url):
        """Sets the idp_metadata_url of this SamlConnectionsBody.

        The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties  # noqa: E501

        :param idp_metadata_url: The idp_metadata_url of this SamlConnectionsBody.  # noqa: E501
        :type: str
        """

        self._idp_metadata_url = idp_metadata_url

    @property
    def attribute_mapping(self):
        """Gets the attribute_mapping of this SamlConnectionsBody.  # noqa: E501


        :return: The attribute_mapping of this SamlConnectionsBody.  # noqa: E501
        :rtype: SamlConnectionsAttributeMapping
        """
        return self._attribute_mapping

    @attribute_mapping.setter
    def attribute_mapping(self, attribute_mapping):
        """Sets the attribute_mapping of this SamlConnectionsBody.


        :param attribute_mapping: The attribute_mapping of this SamlConnectionsBody.  # noqa: E501
        :type: SamlConnectionsAttributeMapping
        """

        self._attribute_mapping = attribute_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamlConnectionsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlConnectionsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
