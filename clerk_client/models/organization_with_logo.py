# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from clerk_client.models.organization import Organization  # noqa: F401,E501

class OrganizationWithLogo(Organization):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logo_url': 'str',
        'image_url': 'str',
        'has_image': 'bool'
    }
    if hasattr(Organization, "swagger_types"):
        swagger_types.update(Organization.swagger_types)

    attribute_map = {
        'logo_url': 'logo_url',
        'image_url': 'image_url',
        'has_image': 'has_image'
    }
    if hasattr(Organization, "attribute_map"):
        attribute_map.update(Organization.attribute_map)

    def __init__(self, logo_url=None, image_url=None, has_image=None, *args, **kwargs):  # noqa: E501
        """OrganizationWithLogo - a model defined in Swagger"""  # noqa: E501
        self._logo_url = None
        self._image_url = None
        self._has_image = None
        self.discriminator = None
        if logo_url is not None:
            self.logo_url = logo_url
        self.image_url = image_url
        if has_image is not None:
            self.has_image = has_image
        Organization.__init__(self, *args, **kwargs)

    @property
    def logo_url(self):
        """Gets the logo_url of this OrganizationWithLogo.  # noqa: E501


        :return: The logo_url of this OrganizationWithLogo.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this OrganizationWithLogo.


        :param logo_url: The logo_url of this OrganizationWithLogo.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def image_url(self):
        """Gets the image_url of this OrganizationWithLogo.  # noqa: E501


        :return: The image_url of this OrganizationWithLogo.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this OrganizationWithLogo.


        :param image_url: The image_url of this OrganizationWithLogo.  # noqa: E501
        :type: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def has_image(self):
        """Gets the has_image of this OrganizationWithLogo.  # noqa: E501


        :return: The has_image of this OrganizationWithLogo.  # noqa: E501
        :rtype: bool
        """
        return self._has_image

    @has_image.setter
    def has_image(self, has_image):
        """Sets the has_image of this OrganizationWithLogo.


        :param has_image: The has_image of this OrganizationWithLogo.  # noqa: E501
        :type: bool
        """

        self._has_image = has_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationWithLogo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationWithLogo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
