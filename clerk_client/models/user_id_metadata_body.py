# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserIdMetadataBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public_metadata': 'object',
        'private_metadata': 'object',
        'unsafe_metadata': 'object'
    }

    attribute_map = {
        'public_metadata': 'public_metadata',
        'private_metadata': 'private_metadata',
        'unsafe_metadata': 'unsafe_metadata'
    }

    def __init__(self, public_metadata=None, private_metadata=None, unsafe_metadata=None):  # noqa: E501
        """UserIdMetadataBody - a model defined in Swagger"""  # noqa: E501
        self._public_metadata = None
        self._private_metadata = None
        self._unsafe_metadata = None
        self.discriminator = None
        if public_metadata is not None:
            self.public_metadata = public_metadata
        if private_metadata is not None:
            self.private_metadata = private_metadata
        if unsafe_metadata is not None:
            self.unsafe_metadata = unsafe_metadata

    @property
    def public_metadata(self):
        """Gets the public_metadata of this UserIdMetadataBody.  # noqa: E501

        Metadata saved on the user, that is visible to both your frontend and backend. The new object will be merged with the existing value.  # noqa: E501

        :return: The public_metadata of this UserIdMetadataBody.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this UserIdMetadataBody.

        Metadata saved on the user, that is visible to both your frontend and backend. The new object will be merged with the existing value.  # noqa: E501

        :param public_metadata: The public_metadata of this UserIdMetadataBody.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def private_metadata(self):
        """Gets the private_metadata of this UserIdMetadataBody.  # noqa: E501

        Metadata saved on the user that is only visible to your backend. The new object will be merged with the existing value.  # noqa: E501

        :return: The private_metadata of this UserIdMetadataBody.  # noqa: E501
        :rtype: object
        """
        return self._private_metadata

    @private_metadata.setter
    def private_metadata(self, private_metadata):
        """Sets the private_metadata of this UserIdMetadataBody.

        Metadata saved on the user that is only visible to your backend. The new object will be merged with the existing value.  # noqa: E501

        :param private_metadata: The private_metadata of this UserIdMetadataBody.  # noqa: E501
        :type: object
        """

        self._private_metadata = private_metadata

    @property
    def unsafe_metadata(self):
        """Gets the unsafe_metadata of this UserIdMetadataBody.  # noqa: E501

        Metadata saved on the user, that can be updated from both the Frontend and Backend APIs. The new object will be merged with the existing value.  Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.  # noqa: E501

        :return: The unsafe_metadata of this UserIdMetadataBody.  # noqa: E501
        :rtype: object
        """
        return self._unsafe_metadata

    @unsafe_metadata.setter
    def unsafe_metadata(self, unsafe_metadata):
        """Sets the unsafe_metadata of this UserIdMetadataBody.

        Metadata saved on the user, that can be updated from both the Frontend and Backend APIs. The new object will be merged with the existing value.  Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.  # noqa: E501

        :param unsafe_metadata: The unsafe_metadata of this UserIdMetadataBody.  # noqa: E501
        :type: object
        """

        self._unsafe_metadata = unsafe_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserIdMetadataBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIdMetadataBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
