# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvitationsBulkBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'inviter_user_id': 'str',
        'role': 'str',
        'public_metadata': 'object',
        'private_metadata': 'object',
        'redirect_url': 'str'
    }

    attribute_map = {
        'email_address': 'email_address',
        'inviter_user_id': 'inviter_user_id',
        'role': 'role',
        'public_metadata': 'public_metadata',
        'private_metadata': 'private_metadata',
        'redirect_url': 'redirect_url'
    }

    def __init__(self, email_address=None, inviter_user_id=None, role=None, public_metadata=None, private_metadata=None, redirect_url=None):  # noqa: E501
        """InvitationsBulkBody - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._inviter_user_id = None
        self._role = None
        self._public_metadata = None
        self._private_metadata = None
        self._redirect_url = None
        self.discriminator = None
        self.email_address = email_address
        self.inviter_user_id = inviter_user_id
        self.role = role
        if public_metadata is not None:
            self.public_metadata = public_metadata
        if private_metadata is not None:
            self.private_metadata = private_metadata
        if redirect_url is not None:
            self.redirect_url = redirect_url

    @property
    def email_address(self):
        """Gets the email_address of this InvitationsBulkBody.  # noqa: E501

        The email address of the new member that is going to be invited to the organization  # noqa: E501

        :return: The email_address of this InvitationsBulkBody.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this InvitationsBulkBody.

        The email address of the new member that is going to be invited to the organization  # noqa: E501

        :param email_address: The email_address of this InvitationsBulkBody.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def inviter_user_id(self):
        """Gets the inviter_user_id of this InvitationsBulkBody.  # noqa: E501

        The ID of the user that invites the new member to the organization. Must be an administrator in the organization.  # noqa: E501

        :return: The inviter_user_id of this InvitationsBulkBody.  # noqa: E501
        :rtype: str
        """
        return self._inviter_user_id

    @inviter_user_id.setter
    def inviter_user_id(self, inviter_user_id):
        """Sets the inviter_user_id of this InvitationsBulkBody.

        The ID of the user that invites the new member to the organization. Must be an administrator in the organization.  # noqa: E501

        :param inviter_user_id: The inviter_user_id of this InvitationsBulkBody.  # noqa: E501
        :type: str
        """
        if inviter_user_id is None:
            raise ValueError("Invalid value for `inviter_user_id`, must not be `None`")  # noqa: E501

        self._inviter_user_id = inviter_user_id

    @property
    def role(self):
        """Gets the role of this InvitationsBulkBody.  # noqa: E501

        The role of the new member in the organization.  # noqa: E501

        :return: The role of this InvitationsBulkBody.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InvitationsBulkBody.

        The role of the new member in the organization.  # noqa: E501

        :param role: The role of this InvitationsBulkBody.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def public_metadata(self):
        """Gets the public_metadata of this InvitationsBulkBody.  # noqa: E501

        Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.  # noqa: E501

        :return: The public_metadata of this InvitationsBulkBody.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this InvitationsBulkBody.

        Metadata saved on the organization invitation, read-only from the Frontend API and fully accessible (read/write) from the Backend API.  # noqa: E501

        :param public_metadata: The public_metadata of this InvitationsBulkBody.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def private_metadata(self):
        """Gets the private_metadata of this InvitationsBulkBody.  # noqa: E501

        Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.  # noqa: E501

        :return: The private_metadata of this InvitationsBulkBody.  # noqa: E501
        :rtype: object
        """
        return self._private_metadata

    @private_metadata.setter
    def private_metadata(self, private_metadata):
        """Sets the private_metadata of this InvitationsBulkBody.

        Metadata saved on the organization invitation, fully accessible (read/write) from the Backend API but not visible from the Frontend API.  # noqa: E501

        :param private_metadata: The private_metadata of this InvitationsBulkBody.  # noqa: E501
        :type: object
        """

        self._private_metadata = private_metadata

    @property
    def redirect_url(self):
        """Gets the redirect_url of this InvitationsBulkBody.  # noqa: E501

        Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.  # noqa: E501

        :return: The redirect_url of this InvitationsBulkBody.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this InvitationsBulkBody.

        Optional URL that the invitee will be redirected to once they accept the invitation by clicking the join link in the invitation email.  # noqa: E501

        :param redirect_url: The redirect_url of this InvitationsBulkBody.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationsBulkBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationsBulkBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
