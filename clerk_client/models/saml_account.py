# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SAMLAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'provider': 'str',
        'active': 'bool',
        'email_address': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'provider_user_id': 'str',
        'verification': 'OneOfSAMLAccountVerification'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'provider': 'provider',
        'active': 'active',
        'email_address': 'email_address',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'provider_user_id': 'provider_user_id',
        'verification': 'verification'
    }

    def __init__(self, id=None, object=None, provider=None, active=None, email_address=None, first_name=None, last_name=None, provider_user_id=None, verification=None):  # noqa: E501
        """SAMLAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._provider = None
        self._active = None
        self._email_address = None
        self._first_name = None
        self._last_name = None
        self._provider_user_id = None
        self._verification = None
        self.discriminator = None
        self.id = id
        self.object = object
        self.provider = provider
        self.active = active
        self.email_address = email_address
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if provider_user_id is not None:
            self.provider_user_id = provider_user_id
        self.verification = verification

    @property
    def id(self):
        """Gets the id of this SAMLAccount.  # noqa: E501


        :return: The id of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SAMLAccount.


        :param id: The id of this SAMLAccount.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object(self):
        """Gets the object of this SAMLAccount.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this SAMLAccount.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this SAMLAccount.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["saml_account"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def provider(self):
        """Gets the provider of this SAMLAccount.  # noqa: E501


        :return: The provider of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SAMLAccount.


        :param provider: The provider of this SAMLAccount.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def active(self):
        """Gets the active of this SAMLAccount.  # noqa: E501


        :return: The active of this SAMLAccount.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SAMLAccount.


        :param active: The active of this SAMLAccount.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def email_address(self):
        """Gets the email_address of this SAMLAccount.  # noqa: E501


        :return: The email_address of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this SAMLAccount.


        :param email_address: The email_address of this SAMLAccount.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this SAMLAccount.  # noqa: E501


        :return: The first_name of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SAMLAccount.


        :param first_name: The first_name of this SAMLAccount.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SAMLAccount.  # noqa: E501


        :return: The last_name of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SAMLAccount.


        :param last_name: The last_name of this SAMLAccount.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def provider_user_id(self):
        """Gets the provider_user_id of this SAMLAccount.  # noqa: E501


        :return: The provider_user_id of this SAMLAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider_user_id

    @provider_user_id.setter
    def provider_user_id(self, provider_user_id):
        """Sets the provider_user_id of this SAMLAccount.


        :param provider_user_id: The provider_user_id of this SAMLAccount.  # noqa: E501
        :type: str
        """

        self._provider_user_id = provider_user_id

    @property
    def verification(self):
        """Gets the verification of this SAMLAccount.  # noqa: E501


        :return: The verification of this SAMLAccount.  # noqa: E501
        :rtype: OneOfSAMLAccountVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this SAMLAccount.


        :param verification: The verification of this SAMLAccount.  # noqa: E501
        :type: OneOfSAMLAccountVerification
        """
        if verification is None:
            raise ValueError("Invalid value for `verification`, must not be `None`")  # noqa: E501

        self._verification = verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SAMLAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SAMLAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
