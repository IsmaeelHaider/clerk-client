# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'role': 'str',
        'permissions': 'list[str]',
        'public_metadata': 'object',
        'private_metadata': 'object',
        'organization': 'AllOfOrganizationMembershipOrganization',
        'public_user_data': 'OrganizationMembershipPublicUserData',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'role': 'role',
        'permissions': 'permissions',
        'public_metadata': 'public_metadata',
        'private_metadata': 'private_metadata',
        'organization': 'organization',
        'public_user_data': 'public_user_data',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, object=None, role=None, permissions=None, public_metadata=None, private_metadata=None, organization=None, public_user_data=None, created_at=None, updated_at=None):  # noqa: E501
        """OrganizationMembership - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._role = None
        self._permissions = None
        self._public_metadata = None
        self._private_metadata = None
        self._organization = None
        self._public_user_data = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if object is not None:
            self.object = object
        if role is not None:
            self.role = role
        if permissions is not None:
            self.permissions = permissions
        if public_metadata is not None:
            self.public_metadata = public_metadata
        if private_metadata is not None:
            self.private_metadata = private_metadata
        if organization is not None:
            self.organization = organization
        if public_user_data is not None:
            self.public_user_data = public_user_data
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this OrganizationMembership.  # noqa: E501


        :return: The id of this OrganizationMembership.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationMembership.


        :param id: The id of this OrganizationMembership.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """Gets the object of this OrganizationMembership.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this OrganizationMembership.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this OrganizationMembership.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this OrganizationMembership.  # noqa: E501
        :type: str
        """
        allowed_values = ["organization_membership"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def role(self):
        """Gets the role of this OrganizationMembership.  # noqa: E501


        :return: The role of this OrganizationMembership.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationMembership.


        :param role: The role of this OrganizationMembership.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def permissions(self):
        """Gets the permissions of this OrganizationMembership.  # noqa: E501


        :return: The permissions of this OrganizationMembership.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OrganizationMembership.


        :param permissions: The permissions of this OrganizationMembership.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def public_metadata(self):
        """Gets the public_metadata of this OrganizationMembership.  # noqa: E501

        Metadata saved on the organization membership, accessible from both Frontend and Backend APIs  # noqa: E501

        :return: The public_metadata of this OrganizationMembership.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this OrganizationMembership.

        Metadata saved on the organization membership, accessible from both Frontend and Backend APIs  # noqa: E501

        :param public_metadata: The public_metadata of this OrganizationMembership.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def private_metadata(self):
        """Gets the private_metadata of this OrganizationMembership.  # noqa: E501

        Metadata saved on the organization membership, accessible only from the Backend API  # noqa: E501

        :return: The private_metadata of this OrganizationMembership.  # noqa: E501
        :rtype: object
        """
        return self._private_metadata

    @private_metadata.setter
    def private_metadata(self, private_metadata):
        """Sets the private_metadata of this OrganizationMembership.

        Metadata saved on the organization membership, accessible only from the Backend API  # noqa: E501

        :param private_metadata: The private_metadata of this OrganizationMembership.  # noqa: E501
        :type: object
        """

        self._private_metadata = private_metadata

    @property
    def organization(self):
        """Gets the organization of this OrganizationMembership.  # noqa: E501


        :return: The organization of this OrganizationMembership.  # noqa: E501
        :rtype: AllOfOrganizationMembershipOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrganizationMembership.


        :param organization: The organization of this OrganizationMembership.  # noqa: E501
        :type: AllOfOrganizationMembershipOrganization
        """

        self._organization = organization

    @property
    def public_user_data(self):
        """Gets the public_user_data of this OrganizationMembership.  # noqa: E501


        :return: The public_user_data of this OrganizationMembership.  # noqa: E501
        :rtype: OrganizationMembershipPublicUserData
        """
        return self._public_user_data

    @public_user_data.setter
    def public_user_data(self, public_user_data):
        """Sets the public_user_data of this OrganizationMembership.


        :param public_user_data: The public_user_data of this OrganizationMembership.  # noqa: E501
        :type: OrganizationMembershipPublicUserData
        """

        self._public_user_data = public_user_data

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationMembership.  # noqa: E501

        Unix timestamp of creation.  # noqa: E501

        :return: The created_at of this OrganizationMembership.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationMembership.

        Unix timestamp of creation.  # noqa: E501

        :param created_at: The created_at of this OrganizationMembership.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this OrganizationMembership.  # noqa: E501

        Unix timestamp of last update.  # noqa: E501

        :return: The updated_at of this OrganizationMembership.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrganizationMembership.

        Unix timestamp of last update.  # noqa: E501

        :param updated_at: The updated_at of this OrganizationMembership.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
