# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'token': 'str',
        'provider': 'str',
        'public_metadata': 'object',
        'label': 'str',
        'scopes': 'list[str]',
        'token_secret': 'str'
    }

    attribute_map = {
        'object': 'object',
        'token': 'token',
        'provider': 'provider',
        'public_metadata': 'public_metadata',
        'label': 'label',
        'scopes': 'scopes',
        'token_secret': 'token_secret'
    }

    def __init__(self, object=None, token=None, provider=None, public_metadata=None, label=None, scopes=None, token_secret=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._token = None
        self._provider = None
        self._public_metadata = None
        self._label = None
        self._scopes = None
        self._token_secret = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if token is not None:
            self.token = token
        if provider is not None:
            self.provider = provider
        if public_metadata is not None:
            self.public_metadata = public_metadata
        if label is not None:
            self.label = label
        if scopes is not None:
            self.scopes = scopes
        if token_secret is not None:
            self.token_secret = token_secret

    @property
    def object(self):
        """Gets the object of this InlineResponse2001.  # noqa: E501


        :return: The object of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this InlineResponse2001.


        :param object: The object of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def token(self):
        """Gets the token of this InlineResponse2001.  # noqa: E501

        The access token  # noqa: E501

        :return: The token of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse2001.

        The access token  # noqa: E501

        :param token: The token of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def provider(self):
        """Gets the provider of this InlineResponse2001.  # noqa: E501

        The ID of the provider  # noqa: E501

        :return: The provider of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InlineResponse2001.

        The ID of the provider  # noqa: E501

        :param provider: The provider of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def public_metadata(self):
        """Gets the public_metadata of this InlineResponse2001.  # noqa: E501


        :return: The public_metadata of this InlineResponse2001.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this InlineResponse2001.


        :param public_metadata: The public_metadata of this InlineResponse2001.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def label(self):
        """Gets the label of this InlineResponse2001.  # noqa: E501


        :return: The label of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse2001.


        :param label: The label of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def scopes(self):
        """Gets the scopes of this InlineResponse2001.  # noqa: E501

        The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.  # noqa: E501

        :return: The scopes of this InlineResponse2001.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this InlineResponse2001.

        The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.  # noqa: E501

        :param scopes: The scopes of this InlineResponse2001.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def token_secret(self):
        """Gets the token_secret of this InlineResponse2001.  # noqa: E501

        The token secret. Only present for OAuth 1.0 tokens.  # noqa: E501

        :return: The token_secret of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._token_secret

    @token_secret.setter
    def token_secret(self, token_secret):
        """Sets the token_secret of this InlineResponse2001.

        The token secret. Only present for OAuth 1.0 tokens.  # noqa: E501

        :param token_secret: The token_secret of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._token_secret = token_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
