# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'status': 'str',
        'required_fields': 'list[str]',
        'optional_fields': 'list[str]',
        'missing_fields': 'list[str]',
        'unverified_fields': 'list[str]',
        'verifications': 'object',
        'username': 'str',
        'email_address': 'str',
        'phone_number': 'str',
        'web3_wallet': 'str',
        'password_enabled': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'unsafe_metadata': 'object',
        'public_metadata': 'object',
        'custom_action': 'bool',
        'external_id': 'str',
        'created_session_id': 'str',
        'created_user_id': 'str',
        'abandon_at': 'int',
        'external_account': 'object'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'status': 'status',
        'required_fields': 'required_fields',
        'optional_fields': 'optional_fields',
        'missing_fields': 'missing_fields',
        'unverified_fields': 'unverified_fields',
        'verifications': 'verifications',
        'username': 'username',
        'email_address': 'email_address',
        'phone_number': 'phone_number',
        'web3_wallet': 'web3_wallet',
        'password_enabled': 'password_enabled',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'unsafe_metadata': 'unsafe_metadata',
        'public_metadata': 'public_metadata',
        'custom_action': 'custom_action',
        'external_id': 'external_id',
        'created_session_id': 'created_session_id',
        'created_user_id': 'created_user_id',
        'abandon_at': 'abandon_at',
        'external_account': 'external_account'
    }

    def __init__(self, object=None, id=None, status=None, required_fields=None, optional_fields=None, missing_fields=None, unverified_fields=None, verifications=None, username=None, email_address=None, phone_number=None, web3_wallet=None, password_enabled=None, first_name=None, last_name=None, unsafe_metadata=None, public_metadata=None, custom_action=None, external_id=None, created_session_id=None, created_user_id=None, abandon_at=None, external_account=None):  # noqa: E501
        """SignUp - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._status = None
        self._required_fields = None
        self._optional_fields = None
        self._missing_fields = None
        self._unverified_fields = None
        self._verifications = None
        self._username = None
        self._email_address = None
        self._phone_number = None
        self._web3_wallet = None
        self._password_enabled = None
        self._first_name = None
        self._last_name = None
        self._unsafe_metadata = None
        self._public_metadata = None
        self._custom_action = None
        self._external_id = None
        self._created_session_id = None
        self._created_user_id = None
        self._abandon_at = None
        self._external_account = None
        self.discriminator = None
        self.object = object
        self.id = id
        self.status = status
        if required_fields is not None:
            self.required_fields = required_fields
        if optional_fields is not None:
            self.optional_fields = optional_fields
        if missing_fields is not None:
            self.missing_fields = missing_fields
        if unverified_fields is not None:
            self.unverified_fields = unverified_fields
        if verifications is not None:
            self.verifications = verifications
        if username is not None:
            self.username = username
        if email_address is not None:
            self.email_address = email_address
        if phone_number is not None:
            self.phone_number = phone_number
        if web3_wallet is not None:
            self.web3_wallet = web3_wallet
        self.password_enabled = password_enabled
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if unsafe_metadata is not None:
            self.unsafe_metadata = unsafe_metadata
        if public_metadata is not None:
            self.public_metadata = public_metadata
        self.custom_action = custom_action
        if external_id is not None:
            self.external_id = external_id
        if created_session_id is not None:
            self.created_session_id = created_session_id
        if created_user_id is not None:
            self.created_user_id = created_user_id
        self.abandon_at = abandon_at
        if external_account is not None:
            self.external_account = external_account

    @property
    def object(self):
        """Gets the object of this SignUp.  # noqa: E501


        :return: The object of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this SignUp.


        :param object: The object of this SignUp.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["sign_up_attempt"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def id(self):
        """Gets the id of this SignUp.  # noqa: E501


        :return: The id of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SignUp.


        :param id: The id of this SignUp.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this SignUp.  # noqa: E501


        :return: The status of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SignUp.


        :param status: The status of this SignUp.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["missing_requirements", "complete", "abandoned"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def required_fields(self):
        """Gets the required_fields of this SignUp.  # noqa: E501


        :return: The required_fields of this SignUp.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_fields

    @required_fields.setter
    def required_fields(self, required_fields):
        """Sets the required_fields of this SignUp.


        :param required_fields: The required_fields of this SignUp.  # noqa: E501
        :type: list[str]
        """

        self._required_fields = required_fields

    @property
    def optional_fields(self):
        """Gets the optional_fields of this SignUp.  # noqa: E501


        :return: The optional_fields of this SignUp.  # noqa: E501
        :rtype: list[str]
        """
        return self._optional_fields

    @optional_fields.setter
    def optional_fields(self, optional_fields):
        """Sets the optional_fields of this SignUp.


        :param optional_fields: The optional_fields of this SignUp.  # noqa: E501
        :type: list[str]
        """

        self._optional_fields = optional_fields

    @property
    def missing_fields(self):
        """Gets the missing_fields of this SignUp.  # noqa: E501


        :return: The missing_fields of this SignUp.  # noqa: E501
        :rtype: list[str]
        """
        return self._missing_fields

    @missing_fields.setter
    def missing_fields(self, missing_fields):
        """Sets the missing_fields of this SignUp.


        :param missing_fields: The missing_fields of this SignUp.  # noqa: E501
        :type: list[str]
        """

        self._missing_fields = missing_fields

    @property
    def unverified_fields(self):
        """Gets the unverified_fields of this SignUp.  # noqa: E501


        :return: The unverified_fields of this SignUp.  # noqa: E501
        :rtype: list[str]
        """
        return self._unverified_fields

    @unverified_fields.setter
    def unverified_fields(self, unverified_fields):
        """Sets the unverified_fields of this SignUp.


        :param unverified_fields: The unverified_fields of this SignUp.  # noqa: E501
        :type: list[str]
        """

        self._unverified_fields = unverified_fields

    @property
    def verifications(self):
        """Gets the verifications of this SignUp.  # noqa: E501


        :return: The verifications of this SignUp.  # noqa: E501
        :rtype: object
        """
        return self._verifications

    @verifications.setter
    def verifications(self, verifications):
        """Sets the verifications of this SignUp.


        :param verifications: The verifications of this SignUp.  # noqa: E501
        :type: object
        """

        self._verifications = verifications

    @property
    def username(self):
        """Gets the username of this SignUp.  # noqa: E501


        :return: The username of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SignUp.


        :param username: The username of this SignUp.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email_address(self):
        """Gets the email_address of this SignUp.  # noqa: E501


        :return: The email_address of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this SignUp.


        :param email_address: The email_address of this SignUp.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this SignUp.  # noqa: E501


        :return: The phone_number of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SignUp.


        :param phone_number: The phone_number of this SignUp.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def web3_wallet(self):
        """Gets the web3_wallet of this SignUp.  # noqa: E501


        :return: The web3_wallet of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._web3_wallet

    @web3_wallet.setter
    def web3_wallet(self, web3_wallet):
        """Sets the web3_wallet of this SignUp.


        :param web3_wallet: The web3_wallet of this SignUp.  # noqa: E501
        :type: str
        """

        self._web3_wallet = web3_wallet

    @property
    def password_enabled(self):
        """Gets the password_enabled of this SignUp.  # noqa: E501


        :return: The password_enabled of this SignUp.  # noqa: E501
        :rtype: bool
        """
        return self._password_enabled

    @password_enabled.setter
    def password_enabled(self, password_enabled):
        """Sets the password_enabled of this SignUp.


        :param password_enabled: The password_enabled of this SignUp.  # noqa: E501
        :type: bool
        """
        if password_enabled is None:
            raise ValueError("Invalid value for `password_enabled`, must not be `None`")  # noqa: E501

        self._password_enabled = password_enabled

    @property
    def first_name(self):
        """Gets the first_name of this SignUp.  # noqa: E501


        :return: The first_name of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SignUp.


        :param first_name: The first_name of this SignUp.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SignUp.  # noqa: E501


        :return: The last_name of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SignUp.


        :param last_name: The last_name of this SignUp.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def unsafe_metadata(self):
        """Gets the unsafe_metadata of this SignUp.  # noqa: E501


        :return: The unsafe_metadata of this SignUp.  # noqa: E501
        :rtype: object
        """
        return self._unsafe_metadata

    @unsafe_metadata.setter
    def unsafe_metadata(self, unsafe_metadata):
        """Sets the unsafe_metadata of this SignUp.


        :param unsafe_metadata: The unsafe_metadata of this SignUp.  # noqa: E501
        :type: object
        """

        self._unsafe_metadata = unsafe_metadata

    @property
    def public_metadata(self):
        """Gets the public_metadata of this SignUp.  # noqa: E501


        :return: The public_metadata of this SignUp.  # noqa: E501
        :rtype: object
        """
        return self._public_metadata

    @public_metadata.setter
    def public_metadata(self, public_metadata):
        """Sets the public_metadata of this SignUp.


        :param public_metadata: The public_metadata of this SignUp.  # noqa: E501
        :type: object
        """

        self._public_metadata = public_metadata

    @property
    def custom_action(self):
        """Gets the custom_action of this SignUp.  # noqa: E501


        :return: The custom_action of this SignUp.  # noqa: E501
        :rtype: bool
        """
        return self._custom_action

    @custom_action.setter
    def custom_action(self, custom_action):
        """Sets the custom_action of this SignUp.


        :param custom_action: The custom_action of this SignUp.  # noqa: E501
        :type: bool
        """
        if custom_action is None:
            raise ValueError("Invalid value for `custom_action`, must not be `None`")  # noqa: E501

        self._custom_action = custom_action

    @property
    def external_id(self):
        """Gets the external_id of this SignUp.  # noqa: E501


        :return: The external_id of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SignUp.


        :param external_id: The external_id of this SignUp.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def created_session_id(self):
        """Gets the created_session_id of this SignUp.  # noqa: E501


        :return: The created_session_id of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._created_session_id

    @created_session_id.setter
    def created_session_id(self, created_session_id):
        """Sets the created_session_id of this SignUp.


        :param created_session_id: The created_session_id of this SignUp.  # noqa: E501
        :type: str
        """

        self._created_session_id = created_session_id

    @property
    def created_user_id(self):
        """Gets the created_user_id of this SignUp.  # noqa: E501


        :return: The created_user_id of this SignUp.  # noqa: E501
        :rtype: str
        """
        return self._created_user_id

    @created_user_id.setter
    def created_user_id(self, created_user_id):
        """Sets the created_user_id of this SignUp.


        :param created_user_id: The created_user_id of this SignUp.  # noqa: E501
        :type: str
        """

        self._created_user_id = created_user_id

    @property
    def abandon_at(self):
        """Gets the abandon_at of this SignUp.  # noqa: E501


        :return: The abandon_at of this SignUp.  # noqa: E501
        :rtype: int
        """
        return self._abandon_at

    @abandon_at.setter
    def abandon_at(self, abandon_at):
        """Sets the abandon_at of this SignUp.


        :param abandon_at: The abandon_at of this SignUp.  # noqa: E501
        :type: int
        """
        if abandon_at is None:
            raise ValueError("Invalid value for `abandon_at`, must not be `None`")  # noqa: E501

        self._abandon_at = abandon_at

    @property
    def external_account(self):
        """Gets the external_account of this SignUp.  # noqa: E501


        :return: The external_account of this SignUp.  # noqa: E501
        :rtype: object
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """Sets the external_account of this SignUp.


        :param external_account: The external_account of this SignUp.  # noqa: E501
        :type: object
        """

        self._external_account = external_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
