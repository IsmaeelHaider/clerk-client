# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneNumber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'object': 'str',
        'phone_number': 'str',
        'reserved_for_second_factor': 'bool',
        'default_second_factor': 'bool',
        'reserved': 'bool',
        'verification': 'OneOfPhoneNumberVerification',
        'linked_to': 'list[IdentificationLink]',
        'backup_codes': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'phone_number': 'phone_number',
        'reserved_for_second_factor': 'reserved_for_second_factor',
        'default_second_factor': 'default_second_factor',
        'reserved': 'reserved',
        'verification': 'verification',
        'linked_to': 'linked_to',
        'backup_codes': 'backup_codes'
    }

    def __init__(self, id=None, object=None, phone_number=None, reserved_for_second_factor=None, default_second_factor=None, reserved=None, verification=None, linked_to=None, backup_codes=None):  # noqa: E501
        """PhoneNumber - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._object = None
        self._phone_number = None
        self._reserved_for_second_factor = None
        self._default_second_factor = None
        self._reserved = None
        self._verification = None
        self._linked_to = None
        self._backup_codes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.object = object
        self.phone_number = phone_number
        if reserved_for_second_factor is not None:
            self.reserved_for_second_factor = reserved_for_second_factor
        if default_second_factor is not None:
            self.default_second_factor = default_second_factor
        self.reserved = reserved
        self.verification = verification
        self.linked_to = linked_to
        if backup_codes is not None:
            self.backup_codes = backup_codes

    @property
    def id(self):
        """Gets the id of this PhoneNumber.  # noqa: E501


        :return: The id of this PhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneNumber.


        :param id: The id of this PhoneNumber.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """Gets the object of this PhoneNumber.  # noqa: E501

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :return: The object of this PhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this PhoneNumber.

        String representing the object's type. Objects of the same type share the same value.   # noqa: E501

        :param object: The object of this PhoneNumber.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["phone_number"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def phone_number(self):
        """Gets the phone_number of this PhoneNumber.  # noqa: E501


        :return: The phone_number of this PhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PhoneNumber.


        :param phone_number: The phone_number of this PhoneNumber.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def reserved_for_second_factor(self):
        """Gets the reserved_for_second_factor of this PhoneNumber.  # noqa: E501


        :return: The reserved_for_second_factor of this PhoneNumber.  # noqa: E501
        :rtype: bool
        """
        return self._reserved_for_second_factor

    @reserved_for_second_factor.setter
    def reserved_for_second_factor(self, reserved_for_second_factor):
        """Sets the reserved_for_second_factor of this PhoneNumber.


        :param reserved_for_second_factor: The reserved_for_second_factor of this PhoneNumber.  # noqa: E501
        :type: bool
        """

        self._reserved_for_second_factor = reserved_for_second_factor

    @property
    def default_second_factor(self):
        """Gets the default_second_factor of this PhoneNumber.  # noqa: E501


        :return: The default_second_factor of this PhoneNumber.  # noqa: E501
        :rtype: bool
        """
        return self._default_second_factor

    @default_second_factor.setter
    def default_second_factor(self, default_second_factor):
        """Sets the default_second_factor of this PhoneNumber.


        :param default_second_factor: The default_second_factor of this PhoneNumber.  # noqa: E501
        :type: bool
        """

        self._default_second_factor = default_second_factor

    @property
    def reserved(self):
        """Gets the reserved of this PhoneNumber.  # noqa: E501


        :return: The reserved of this PhoneNumber.  # noqa: E501
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this PhoneNumber.


        :param reserved: The reserved of this PhoneNumber.  # noqa: E501
        :type: bool
        """
        if reserved is None:
            raise ValueError("Invalid value for `reserved`, must not be `None`")  # noqa: E501

        self._reserved = reserved

    @property
    def verification(self):
        """Gets the verification of this PhoneNumber.  # noqa: E501


        :return: The verification of this PhoneNumber.  # noqa: E501
        :rtype: OneOfPhoneNumberVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this PhoneNumber.


        :param verification: The verification of this PhoneNumber.  # noqa: E501
        :type: OneOfPhoneNumberVerification
        """
        if verification is None:
            raise ValueError("Invalid value for `verification`, must not be `None`")  # noqa: E501

        self._verification = verification

    @property
    def linked_to(self):
        """Gets the linked_to of this PhoneNumber.  # noqa: E501


        :return: The linked_to of this PhoneNumber.  # noqa: E501
        :rtype: list[IdentificationLink]
        """
        return self._linked_to

    @linked_to.setter
    def linked_to(self, linked_to):
        """Sets the linked_to of this PhoneNumber.


        :param linked_to: The linked_to of this PhoneNumber.  # noqa: E501
        :type: list[IdentificationLink]
        """
        if linked_to is None:
            raise ValueError("Invalid value for `linked_to`, must not be `None`")  # noqa: E501

        self._linked_to = linked_to

    @property
    def backup_codes(self):
        """Gets the backup_codes of this PhoneNumber.  # noqa: E501


        :return: The backup_codes of this PhoneNumber.  # noqa: E501
        :rtype: list[str]
        """
        return self._backup_codes

    @backup_codes.setter
    def backup_codes(self, backup_codes):
        """Sets the backup_codes of this PhoneNumber.


        :param backup_codes: The backup_codes of this PhoneNumber.  # noqa: E501
        :type: list[str]
        """

        self._backup_codes = backup_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneNumber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneNumber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
