# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllowlistIdentifiersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'notify': 'bool'
    }

    attribute_map = {
        'identifier': 'identifier',
        'notify': 'notify'
    }

    def __init__(self, identifier=None, notify=False):  # noqa: E501
        """AllowlistIdentifiersBody - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._notify = None
        self.discriminator = None
        self.identifier = identifier
        if notify is not None:
            self.notify = notify

    @property
    def identifier(self):
        """Gets the identifier of this AllowlistIdentifiersBody.  # noqa: E501

        The identifier to be added in the allow-list. This can be an email address, a phone number or a web3 wallet.  # noqa: E501

        :return: The identifier of this AllowlistIdentifiersBody.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AllowlistIdentifiersBody.

        The identifier to be added in the allow-list. This can be an email address, a phone number or a web3 wallet.  # noqa: E501

        :param identifier: The identifier of this AllowlistIdentifiersBody.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def notify(self):
        """Gets the notify of this AllowlistIdentifiersBody.  # noqa: E501

        This flag denotes whether the given identifier will receive an invitation to join the application. Note that this only works for email address and phone number identifiers.  # noqa: E501

        :return: The notify of this AllowlistIdentifiersBody.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this AllowlistIdentifiersBody.

        This flag denotes whether the given identifier will receive an invitation to join the application. Note that this only works for email address and phone number identifiers.  # noqa: E501

        :param notify: The notify of this AllowlistIdentifiersBody.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllowlistIdentifiersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllowlistIdentifiersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
