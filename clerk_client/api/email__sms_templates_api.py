# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from clerk_client.api_client import ApiClient


class EmailSMSTemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_template(self, template_type, slug, **kwargs):  # noqa: E501
        """Retrieve a template  # noqa: E501

        Returns the details of a template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of templates to retrieve (email or SMS) (required)
        :param str slug: The slug (i.e. machine-friendly name) of the template to retrieve (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
            return data

    def get_template_with_http_info(self, template_type, slug, **kwargs):  # noqa: E501
        """Retrieve a template  # noqa: E501

        Returns the details of a template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_with_http_info(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of templates to retrieve (email or SMS) (required)
        :param str slug: The slug (i.e. machine-friendly name) of the template to retrieve (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type', 'slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `get_template`")  # noqa: E501
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `get_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_type' in params:
            path_params['template_type'] = params['template_type']  # noqa: E501
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_type}/{slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_list(self, template_type, **kwargs):  # noqa: E501
        """List all templates  # noqa: E501

        Returns a list of all templates. The templates are returned sorted by position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_list(template_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of templates to list (email or SMS) (required)
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_list_with_http_info(template_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_list_with_http_info(template_type, **kwargs)  # noqa: E501
            return data

    def get_template_list_with_http_info(self, template_type, **kwargs):  # noqa: E501
        """List all templates  # noqa: E501

        Returns a list of all templates. The templates are returned sorted by position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_list_with_http_info(template_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of templates to list (email or SMS) (required)
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `get_template_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_type' in params:
            path_params['template_type'] = params['template_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Template]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_template(self, template_type, slug, **kwargs):  # noqa: E501
        """Preview changes to a template  # noqa: E501

        Returns a preview of a template for a given template_type, slug and body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_template(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to preview (required)
        :param str slug: The slug of the template to preview (required)
        :param SlugPreviewBody body: Required parameters
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
            return data

    def preview_template_with_http_info(self, template_type, slug, **kwargs):  # noqa: E501
        """Preview changes to a template  # noqa: E501

        Returns a preview of a template for a given template_type, slug and body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_template_with_http_info(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to preview (required)
        :param str slug: The slug of the template to preview (required)
        :param SlugPreviewBody body: Required parameters
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type', 'slug', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `preview_template`")  # noqa: E501
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `preview_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_type' in params:
            path_params['template_type'] = params['template_type']  # noqa: E501
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_type}/{slug}/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revert_template(self, template_type, slug, **kwargs):  # noqa: E501
        """Revert a template  # noqa: E501

        Reverts an updated template to its default state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revert_template(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to revert (required)
        :param str slug: The slug of the template to revert (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revert_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
        else:
            (data) = self.revert_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
            return data

    def revert_template_with_http_info(self, template_type, slug, **kwargs):  # noqa: E501
        """Revert a template  # noqa: E501

        Reverts an updated template to its default state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revert_template_with_http_info(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to revert (required)
        :param str slug: The slug of the template to revert (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type', 'slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revert_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `revert_template`")  # noqa: E501
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `revert_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_type' in params:
            path_params['template_type'] = params['template_type']  # noqa: E501
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_type}/{slug}/revert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_template_delivery(self, template_type, slug, **kwargs):  # noqa: E501
        """Toggle the delivery by Clerk for a template of a given type and slug  # noqa: E501

        Toggles the delivery by Clerk for a template of a given type and slug. If disabled, Clerk will not deliver the resulting email or SMS. The app developer will need to listen to the `email.created` or `sms.created` webhooks in order to handle delivery themselves.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_template_delivery(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to toggle delivery for (required)
        :param str slug: The slug of the template for which to toggle delivery (required)
        :param SlugToggleDeliveryBody body:
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_template_delivery_with_http_info(template_type, slug, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_template_delivery_with_http_info(template_type, slug, **kwargs)  # noqa: E501
            return data

    def toggle_template_delivery_with_http_info(self, template_type, slug, **kwargs):  # noqa: E501
        """Toggle the delivery by Clerk for a template of a given type and slug  # noqa: E501

        Toggles the delivery by Clerk for a template of a given type and slug. If disabled, Clerk will not deliver the resulting email or SMS. The app developer will need to listen to the `email.created` or `sms.created` webhooks in order to handle delivery themselves.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_template_delivery_with_http_info(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to toggle delivery for (required)
        :param str slug: The slug of the template for which to toggle delivery (required)
        :param SlugToggleDeliveryBody body:
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type', 'slug', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_template_delivery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `toggle_template_delivery`")  # noqa: E501
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `toggle_template_delivery`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_type' in params:
            path_params['template_type'] = params['template_type']  # noqa: E501
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_type}/{slug}/toggle_delivery', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_template(self, template_type, slug, **kwargs):  # noqa: E501
        """Update a template for a given type and slug  # noqa: E501

        Updates the existing template of the given type and slug  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_template(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to update (required)
        :param str slug: The slug of the template to update (required)
        :param TemplateTypeSlugBody body:
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_template_with_http_info(template_type, slug, **kwargs)  # noqa: E501
            return data

    def upsert_template_with_http_info(self, template_type, slug, **kwargs):  # noqa: E501
        """Update a template for a given type and slug  # noqa: E501

        Updates the existing template of the given type and slug  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_template_with_http_info(template_type, slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_type: The type of template to update (required)
        :param str slug: The slug of the template to update (required)
        :param TemplateTypeSlugBody body:
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type', 'slug', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `upsert_template`")  # noqa: E501
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `upsert_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_type' in params:
            path_params['template_type'] = params['template_type']  # noqa: E501
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_type}/{slug}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
