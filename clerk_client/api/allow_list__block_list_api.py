# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@clerk.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from clerk_client.api_client import ApiClient


class AllowListBlockListApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_allowlist_identifier(self, **kwargs):  # noqa: E501
        """Add identifier to the allow-list  # noqa: E501

        Create an identifier allowed to sign up to an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_allowlist_identifier(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllowlistIdentifiersBody body:
        :return: AllowlistIdentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_allowlist_identifier_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_allowlist_identifier_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_allowlist_identifier_with_http_info(self, **kwargs):  # noqa: E501
        """Add identifier to the allow-list  # noqa: E501

        Create an identifier allowed to sign up to an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_allowlist_identifier_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllowlistIdentifiersBody body:
        :return: AllowlistIdentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_allowlist_identifier" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/allowlist_identifiers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllowlistIdentifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_blocklist_identifier(self, **kwargs):  # noqa: E501
        """Add identifier to the block-list  # noqa: E501

        Create an identifier that is blocked from accessing an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_blocklist_identifier(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlocklistIdentifiersBody body:
        :return: BlocklistIdentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_blocklist_identifier_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_blocklist_identifier_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_blocklist_identifier_with_http_info(self, **kwargs):  # noqa: E501
        """Add identifier to the block-list  # noqa: E501

        Create an identifier that is blocked from accessing an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_blocklist_identifier_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlocklistIdentifiersBody body:
        :return: BlocklistIdentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_blocklist_identifier" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blocklist_identifiers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlocklistIdentifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_allowlist_identifier(self, identifier_id, **kwargs):  # noqa: E501
        """Delete identifier from allow-list  # noqa: E501

        Delete an identifier from the instance allow-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_allowlist_identifier(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The ID of the identifier to delete from the allow-list (required)
        :return: DeletedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_allowlist_identifier_with_http_info(identifier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_allowlist_identifier_with_http_info(identifier_id, **kwargs)  # noqa: E501
            return data

    def delete_allowlist_identifier_with_http_info(self, identifier_id, **kwargs):  # noqa: E501
        """Delete identifier from allow-list  # noqa: E501

        Delete an identifier from the instance allow-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_allowlist_identifier_with_http_info(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The ID of the identifier to delete from the allow-list (required)
        :return: DeletedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_allowlist_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_id' is set
        if ('identifier_id' not in params or
                params['identifier_id'] is None):
            raise ValueError("Missing the required parameter `identifier_id` when calling `delete_allowlist_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_id' in params:
            path_params['identifier_id'] = params['identifier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/allowlist_identifiers/{identifier_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_blocklist_identifier(self, identifier_id, **kwargs):  # noqa: E501
        """Delete identifier from block-list  # noqa: E501

        Delete an identifier from the instance block-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_blocklist_identifier(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The ID of the identifier to delete from the block-list (required)
        :return: DeletedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_blocklist_identifier_with_http_info(identifier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_blocklist_identifier_with_http_info(identifier_id, **kwargs)  # noqa: E501
            return data

    def delete_blocklist_identifier_with_http_info(self, identifier_id, **kwargs):  # noqa: E501
        """Delete identifier from block-list  # noqa: E501

        Delete an identifier from the instance block-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_blocklist_identifier_with_http_info(identifier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier_id: The ID of the identifier to delete from the block-list (required)
        :return: DeletedObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_blocklist_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier_id' is set
        if ('identifier_id' not in params or
                params['identifier_id'] is None):
            raise ValueError("Missing the required parameter `identifier_id` when calling `delete_blocklist_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier_id' in params:
            path_params['identifier_id'] = params['identifier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blocklist_identifiers/{identifier_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_allowlist_identifiers(self, **kwargs):  # noqa: E501
        """List all identifiers on the allow-list  # noqa: E501

        Get a list of all identifiers allowed to sign up to an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_allowlist_identifiers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AllowlistIdentifier]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_allowlist_identifiers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_allowlist_identifiers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_allowlist_identifiers_with_http_info(self, **kwargs):  # noqa: E501
        """List all identifiers on the allow-list  # noqa: E501

        Get a list of all identifiers allowed to sign up to an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_allowlist_identifiers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AllowlistIdentifier]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_allowlist_identifiers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/allowlist_identifiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllowlistIdentifier]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_blocklist_identifiers(self, **kwargs):  # noqa: E501
        """List all identifiers on the block-list  # noqa: E501

        Get a list of all identifiers which are not allowed to access an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blocklist_identifiers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BlocklistIdentifiers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_blocklist_identifiers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_blocklist_identifiers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_blocklist_identifiers_with_http_info(self, **kwargs):  # noqa: E501
        """List all identifiers on the block-list  # noqa: E501

        Get a list of all identifiers which are not allowed to access an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blocklist_identifiers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BlocklistIdentifiers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_blocklist_identifiers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blocklist_identifiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlocklistIdentifiers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
